#
# Copyright (c) 2019 10X Genomics, Inc. All rights reserved.
#

@include "spatial_segmentation.mro"
@include "_spatial_imaging_stages.mro"

filetype jpg;
filetype png;
filetype tiff;
filetype txt;
filetype json;
filetype csv;
filetype gpr;

pipeline _SPATIAL_IMAGING_CS(
    in  string                slide_serial_capture_area         "Slide serial number and area id",
    in  path                  loupe_alignment_file              "Path to Loupe-generated manual alignment file",
    in  gpr                   gpr_file                          "Slide GPR file",
    in  vlf                   hd_layout_file                    "Visium HD slide layout file",
    in  string                reorientation_mode                "rotate ('rotation') or rotate+mirror ('rotation+mirror') fiducial template to find best alignment",
    in  file[]                tissue_image_paths                "Path(s) to slide image(s)",
    in  file[]                cytassist_image_paths             "Path(s) to CytAssist image(s)",
    in  int                   dark_images                       "Path(s) to dark background images",
    in  int                   dapi_channel_index                "Index of the DAPI channel if the tissue image is dark image",
    in  string                barcode_whitelist                 "Whitelisted barcodes CSV",
    in  string                visium_hd_slide_name              "Name of slide if Visium HD",
    in  string[]              image_page_names                  "Name(s) of each page of the dark image",
    in  bool                  skip_tissue_detection             "Skip the tissue detection step and select all spots",
    in  bool                  skip_segmentation                 "Skip nucleus segmentation",
    in  int                   max_nucleus_diameter_px           "Maximum diameter of a nucleus that stardist can handle",
    in  bool                  segmentation_from_user            "User has provided nucleus segmentation",
    in  float                 tissue_image_pixel_size           "Pixel size in microns per pixel of tissue image",
    in  h5                    raw_feature_bc_matrix_h5          "Raw feature-barcode matrix",
    in  UmiRegistrationInputs umi_registration_inputs           "Inputs for UMI registration",
    out jpg                   aligned_fiducials                 "Slide image annotated with fiducial alignment",
    out jpg                   detected_tissue_image             "Slide image annotated with detected tissue",
    out jpg                   qc_resampled_cyta_img             "Transformed CytAssist image to the tissue hi-res image space",
    out jpg                   qc_regist_target_img              "The high resolution image to which the CytAssist image is transformed",
    out jpg                   aligned_tissue_image              "Registration image between CytAssist image and microscope image",
    out csv                   tissue_positions                  "Slide position and tissue status of barcodes CSV",
    out txt                   fiducial_positions_list           "Slide position of fiducial spots CSV",
    out json                  barcodes_under_tissue             "Slide position and tissue status of barcodes JSON",
    out float                 fraction_under_tissue             "Fraction of barcodes under tissue",
    out json                  image_scalefactors                "Scale factors for hires and lowres images and fiducial and spot diameters",
    out json                  alignment_metrics                 "Metrics from fiducial alignment procedure",
    out png                   tissue_hires_image                "Slide image scaled to 2000px in the largest dimension",
    out png                   tissue_lowres_image               "Slide image scaled to 600px in the largest dimension",
    out tiff                  cytassist_image                   "RGB brightfield image generated by CytAssist instrument",
    out csv                   barcode_fluorescence_intensity    "Fluorescence intensity at spot",
    out string[]              cloupe_image_page_names           "Name(s) of each page of the dark image specified in the loupe alignment file",
    out file[]                cloupe_display_image_paths        "Images used in cloupe file",
    out json                  fraction_bc_outside_image         "Fraction of barcodes outside of the original resolution image boundries",
    out json                  hd_layout_data_json,
    out json                  tissue_transform_json,
    out json                  cytassist_run_metrics,
    out json                  tissue_registration_metrics,
    out json                  fiducial_transform,
    out tiff                  registration_target_image,
    out bool                  is_visium_hd,
    out string                itk_error_string,
    out json                  imaging_metrics,
    out json                  tissue_image_shape,
    out json                  segment_nuclei_metrics,
    out int                   max_nucleus_diameter_px_used,
    out geojson               pipeline_generated_segmentations  "Nucleus segmentations from pipeline",
    out bool                  disable_segmentation              "If we should disable downstream processing of segmentations",
    out bool                  grabcut_failed,
)
{
    call DETERMINE_PIPELINE_MODE(
        tissue_image_paths    = self.tissue_image_paths,
        cytassist_image_paths = self.cytassist_image_paths,
        visium_hd_slide_name  = self.visium_hd_slide_name,
        barcode_whitelist     = self.barcode_whitelist,
    )

    call GET_CYTASSIST_RUN_METADATA(
        cytassist_image_paths = self.cytassist_image_paths,
    )

    call STANDARDIZE_IMAGES(
        pipeline_mode              = DETERMINE_PIPELINE_MODE.pipeline_mode,
        tissue_image_paths         = self.tissue_image_paths,
        cytassist_image_paths      = self.cytassist_image_paths,
        tissue_image_pixel_size_in = self.tissue_image_pixel_size,
        read_metadata_from_tissue_image = false,
        dark_images                = self.dark_images,
        dapi_channel_index         = self.dapi_channel_index,
        loupe_alignment_file       = self.loupe_alignment_file,
    )

    call LOUPE_ALIGNMENT_READER(
        loupe_alignment_file = self.loupe_alignment_file,
        pipeline_mode        = DETERMINE_PIPELINE_MODE.pipeline_mode,
        scalefactors_json    = STANDARDIZE_IMAGES.scalefactors_json,
    )

    call GPR_READER(
        slide_serial_capture_area = self.slide_serial_capture_area,
        gpr_file                  = self.gpr_file,
        barcode_whitelist         = self.barcode_whitelist,
        loupe_spots_data_json     = LOUPE_ALIGNMENT_READER.loupe_spots_data_json,
    ) using (
        disabled = DETERMINE_PIPELINE_MODE.is_visium_hd,
    )

    call HD_LAYOUT_READER(
        slide_serial_capture_area  = self.slide_serial_capture_area,
        hd_layout_file             = self.hd_layout_file,
        visium_hd_slide_name       = self.visium_hd_slide_name,
        loupe_hd_slide_layout_json = LOUPE_ALIGNMENT_READER.hd_slide_layout_json,
        is_pd                      = false,
        pipeline_mode              = DETERMINE_PIPELINE_MODE.pipeline_mode,
    ) using (
        disabled = DETERMINE_PIPELINE_MODE.is_visium_sd,
    )

    call ALIGN_FIDUCIALS(
        pipeline_mode             = DETERMINE_PIPELINE_MODE.pipeline_mode,
        fiducials_detection_image = STANDARDIZE_IMAGES.fiducials_detection_image,
        gpr_spots_data_json       = GPR_READER.gpr_spots_data_json,
        hd_layout_data_json       = HD_LAYOUT_READER.hd_layout_data_json,
        loupe_spots_data_json     = LOUPE_ALIGNMENT_READER.loupe_spots_data_json,
        reorientation_mode        = self.reorientation_mode,
        crop_info_json            = STANDARDIZE_IMAGES.crop_info_json,
        visium_hd_slide_name      = self.visium_hd_slide_name,
        is_visium_hd              = DETERMINE_PIPELINE_MODE.is_visium_hd,
    )

    call DISABLE_IMAGING_STAGES(
        is_visium_hd               = DETERMINE_PIPELINE_MODE.is_visium_hd,
        tissue_image_paths         = self.tissue_image_paths,
        segmentation_from_user     = self.segmentation_from_user,
        dark_images                = self.dark_images,
        skip_segmentation          = self.skip_segmentation,
        umi_registration_inputs_in = self.umi_registration_inputs,
    )

    call REGISTER_TISSUE(
        tissue_detection_image     = STANDARDIZE_IMAGES.tissue_detection_grayscale_image,
        registration_target_image  = STANDARDIZE_IMAGES.registration_target_image,
        crop_info_json             = STANDARDIZE_IMAGES.crop_info_json,
        tissue_image_pixel_size    = STANDARDIZE_IMAGES.tissue_image_pixel_size,
        loupe_tissue_registration_json = LOUPE_ALIGNMENT_READER.loupe_cyta_data_json,
        is_visium_hd               = DETERMINE_PIPELINE_MODE.is_visium_hd,
        registered_spots_data_json = ALIGN_FIDUCIALS.registered_spots_data_json,
        fid_perp_tmat              = ALIGN_FIDUCIALS.fid_perp_tmat,
        is_pd                      = false,
        skip_feature_matching_init = false,
        loupe_alignment_file       = self.loupe_alignment_file,
        raw_feature_bc_matrix_h5   = self.raw_feature_bc_matrix_h5,
        umi_registration_inputs    = DISABLE_IMAGING_STAGES.umi_registration_inputs,
        fiducial_transform         = ALIGN_FIDUCIALS.transform_matrix,
    ) using (
        disabled = STANDARDIZE_IMAGES.skip_tissue_registration,
    )

    call PICK_REGISTERED_SPOT_DATA(
        align_fiducials_registered_spots_data_json = ALIGN_FIDUCIALS.registered_spots_data_json,
        e2e_registered_spots_data_json = REGISTER_TISSUE.e2e_registered_spots_data_json,
        raw_hd_layout_data_json = HD_LAYOUT_READER.hd_layout_data_json,
        e2e_hd_layout_data_json = REGISTER_TISSUE.e2e_hd_layout_data_json,
    )

    call DETECT_TISSUE(
        pipeline_mode                 = DETERMINE_PIPELINE_MODE.pipeline_mode,
        tissue_detection_grayscale_image = STANDARDIZE_IMAGES.tissue_detection_grayscale_image,
        tissue_detection_saturation_image = STANDARDIZE_IMAGES.tissue_detection_saturation_image,
        skip_tissue_detection         = self.skip_tissue_detection,
        registered_spots_data_json    = PICK_REGISTERED_SPOT_DATA.registered_spots_data_json,
        ignore_loupe_tissue_detection = false,
    )

    call OUTPUT_SPOTS_BARCODES(
        registered_selected_spots_json = DETECT_TISSUE.registered_selected_spots_json,
        tissue_transform_json = REGISTER_TISSUE.tissue_transform_json,
        scalefactors          = STANDARDIZE_IMAGES.scalefactors_json,
        barcode_whitelist     = self.barcode_whitelist,
        tissue_lowres_image   = STANDARDIZE_IMAGES.tissue_lowres_image,
        visium_hd_slide_name  = self.visium_hd_slide_name,
    )

    call OUTPUT_FINAL_ALIGNMENT(
        slide_serial_capture_area  = self.slide_serial_capture_area,
        cytassist_image_paths      = self.cytassist_image_paths,
        tissue_image_paths         = self.tissue_image_paths,
        registered_spots_data_json = PICK_REGISTERED_SPOT_DATA.registered_spots_data_json,
        final_transform_json       = REGISTER_TISSUE.tissue_transform_json,
        # FIXME: Does this transform matrix need to be updated after E2E registration?
        transform_matrix           = ALIGN_FIDUCIALS.transform_matrix,
        registered_selected_spots_json = DETECT_TISSUE.registered_selected_spots_json,
        scalefactors_json          = STANDARDIZE_IMAGES.scalefactors_json,
    )

    call CALCULATE_FLUORESCENCE_INTENSITY(
        tissue_image_paths   = self.tissue_image_paths,
        dark_images          = self.dark_images,
        scalefactors_json    = OUTPUT_SPOTS_BARCODES.scalefactors,
        tissue_positions     = OUTPUT_SPOTS_BARCODES.tissue_positions,
        barcode_whitelist    = self.barcode_whitelist,
        image_page_names     = self.image_page_names,
        loupe_alignment_file = self.loupe_alignment_file,
        pipeline_mode        = DETERMINE_PIPELINE_MODE.pipeline_mode,
    )

    call SEGMENT_NUCLEI(
        fiducial_bounding_box_on_tissue_image = OUTPUT_FINAL_ALIGNMENT.fiducial_bounding_box_on_tissue_image,
        tissue_image_paths      = self.tissue_image_paths,
        max_nucleus_diameter_px = self.max_nucleus_diameter_px,
    ) using (
        disabled = DISABLE_IMAGING_STAGES.disable_imaging_stages,
    )

    call COLLECT_IMAGING_METRICS(
        tissue_image_paths     = self.tissue_image_paths,
        detected_tissue_mask   = DETECT_TISSUE.detected_tissue_mask,
        segmentation_from_user = self.segmentation_from_user,
        summaries              = [REGISTER_TISSUE.summary],
    )

    return (
        fiducial_positions_list      = OUTPUT_SPOTS_BARCODES.final_fiducial_position_list,
        tissue_positions             = OUTPUT_SPOTS_BARCODES.tissue_positions,
        barcodes_under_tissue        = OUTPUT_SPOTS_BARCODES.barcodes_under_tissue,
        fraction_under_tissue        = OUTPUT_SPOTS_BARCODES.fraction_under_tissue,
        image_scalefactors           = OUTPUT_SPOTS_BARCODES.scalefactors,
        tissue_hires_image           = STANDARDIZE_IMAGES.tissue_hires_image,
        tissue_lowres_image          = STANDARDIZE_IMAGES.tissue_lowres_image,
        cytassist_image              = STANDARDIZE_IMAGES.cytassist_image,
        aligned_fiducials            = ALIGN_FIDUCIALS.qc_aligned_fiducials_image,
        detected_tissue_image        = DETECT_TISSUE.qc_detected_tissue_image,
        qc_resampled_cyta_img        = REGISTER_TISSUE.qc_resampled_cyta_img,
        qc_regist_target_img         = REGISTER_TISSUE.qc_regist_target_img,
        aligned_tissue_image         = REGISTER_TISSUE.qc_registered_tissue_image,
        alignment_metrics            = ALIGN_FIDUCIALS.fiducial_alignment_metrics,
        cloupe_display_image_paths   = STANDARDIZE_IMAGES.cloupe_display_image_paths,
        barcode_fluorescence_intensity = CALCULATE_FLUORESCENCE_INTENSITY.barcode_fluorescence_intensity,
        cloupe_image_page_names      = LOUPE_ALIGNMENT_READER.image_page_names,
        fraction_bc_outside_image    = OUTPUT_SPOTS_BARCODES.fraction_bc_outside_image,
        hd_layout_data_json          = PICK_REGISTERED_SPOT_DATA.hd_layout_data_json,
        tissue_transform_json        = OUTPUT_SPOTS_BARCODES.tissue_final_transform_json,
        tissue_registration_metrics  = REGISTER_TISSUE.tissue_registration_metrics,
        fiducial_transform           = ALIGN_FIDUCIALS.transform_matrix,
        registration_target_image    = STANDARDIZE_IMAGES.registration_target_image,
        is_visium_hd                 = DETERMINE_PIPELINE_MODE.is_visium_hd,
        cytassist_run_metrics        = GET_CYTASSIST_RUN_METADATA.cytassist_run_metrics,
        itk_error_string             = REGISTER_TISSUE.itk_error_string,
        disable_segmentation         = DISABLE_IMAGING_STAGES.disable_segmentation,
        pipeline_generated_segmentations = SEGMENT_NUCLEI.nucleus_segmentations,
        segment_nuclei_metrics       = SEGMENT_NUCLEI.segment_nuclei_metrics,
        max_nucleus_diameter_px_used = SEGMENT_NUCLEI.max_nucleus_diameter_px_used,
        imaging_metrics              = COLLECT_IMAGING_METRICS.imaging_metrics,
        tissue_image_shape           = COLLECT_IMAGING_METRICS.tissue_image_shape,
        grabcut_failed               = DETECT_TISSUE.grabcut_failed,
    )
}
