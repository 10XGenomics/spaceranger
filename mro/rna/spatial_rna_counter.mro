#
# Copyright (c) 2023 10X Genomics, Inc. All rights reserved.
#

@include "sc_rna_analyzer.mro"
@include "_antibody_qc_plots.mro"
@include "_basic_sc_rna_counter.mro"
@include "_common_stages.mro"
@include "_cr_lib_stages.mro"
@include "_deconvolve_spots.mro"
@include "_run_spatial_enrichment.mro"
@include "_slfe_matrix_computer.mro"
@include "_spatial_hd_binning.mro"
@include "_spatial_reporting_stages.mro"
@include "_targeted_analyzer.mro"
@include "_v1_pattern_fix.mro"

pipeline BUILD_SPATIAL_COUNT_INPUTS_STRUCT(
    in  string        aligner,
    in  csv           feature_reference,
    in  bool          filter_probes,
    in  bool          include_introns,
    in  int           initial_reads,
    in  bool          no_bam,
    in  int           r1_length,
    in  int           r2_length,
    in  float         subsample_rate,
    in  int           trim_polya_min_score,
    in  int           trim_tso_min_score,
    in  ReferenceInfo reference_info,
    in  csv           target_panel_or_probe_set,
    in  string        target_set_name,
    out CountInputs   count_inputs,
)
{
    return (
        count_inputs = {
            aligner:                     self.aligner,
            annotations:                 null,
            cell_annotation_model:       null,
            check_library_compatibility: null,
            chemistry_specs:             null,
            custom_chemistry_defs:       {},
            enable_tsne:                 null,
            feature_reference:           self.feature_reference,
            filter_probes:               self.filter_probes,
            force_sample_barcodes: {
                cells_per_tag:        null,
                non_singlet_barcodes: null,
                sample_barcodes:      null,
            },
            gene_index:                  null,
            genetic_demux_params:        null,
            include_exons:               true,
            include_introns:             self.include_introns,
            initial_reads:               self.initial_reads,
            min_assignment_confidence:   null,
            min_crispr_umi_threshold:    null,
            no_bam:                      self.no_bam,
            no_secondary_analysis:       null,
            primer_initial_reads:        null,
            primers:                     null,
            r1_length:                   self.r1_length,
            r2_length:                   self.r2_length,
            reference_info:              self.reference_info,
            sample_def:                  null,
            skip_cell_annotation:        null,
            special_genomic_regions:     null,
            subsample_rate:              self.subsample_rate,
            target_set:                  self.target_panel_or_probe_set,
            target_set_name:             self.target_set_name,
            targeting_method:            null,
            tenx_cloud_token_path:       null,
            tenx_cmos:                   null,
            throughput:                  null,
            trim_polya_min_score:        self.trim_polya_min_score,
            trim_tso_min_score:          self.trim_tso_min_score,
        },
    )
}

pipeline SPATIAL_MATRIX_COMPUTER(
    in  string                sample_id,
    in  csv                   target_set,
    in  string                target_set_name,
    in  map[]                 chunks,
    in  map<ChemistryDef>     chemistry_defs,
    in  path                  reference_path,
    in  float                 subsample_rate,
    in  int                   initial_reads,
    in  int                   r1_length                   "Trim input R1 to this length (optional)",
    in  int                   r2_length                   "Trim input R2 to this length (optional)",
    in  int                   trim_polya_min_score,
    in  int                   trim_tso_min_score,
    in  bool                  no_bam,
    in  bool                  filter_probes,
    in  string                aligner,
    in  bool                  is_pd,
    in  csv                   feature_reference,
    in  bool                  is_antibody_only,
    in  bool                  include_introns,
    in  FeatureConfig         feature_config,
    in  V1PatternFixParams    v1_pattern_fix_params,
    in  BarcodeIndexOutput    barcode_index_output,
    out json                  gene_index,
    out map[]                 read_chunks,
    out _SLFE_MATRIX_COMPUTER matrix_computer_outs,
    out PARSE_TARGET_FEATURES parse_target_features_outs,
    out CountInputs           count_inputs,
)
{
    call WRITE_GENE_INDEX(
        reference_path = self.reference_path,
    )

    call PARSE_TARGET_FEATURES(
        target_set       = self.target_set,
        target_set_name  = self.target_set_name,
        reference_path   = self.reference_path,
        gene_index       = WRITE_GENE_INDEX.gene_index,
        filter_probes    = self.filter_probes,
        is_pd            = self.is_pd,
        no_bam           = self.no_bam,
        is_antibody_only = self.is_antibody_only,
    )

    call SETUP_REFERENCE_INFO(
        reference_path = self.reference_path,
        target_set     = PARSE_TARGET_FEATURES.target_panel_or_probe_set,
    )

    call BUILD_SPATIAL_COUNT_INPUTS_STRUCT(
        aligner                   = self.aligner,
        feature_reference         = self.feature_reference,
        filter_probes             = self.filter_probes,
        include_introns           = self.include_introns,
        initial_reads             = self.initial_reads,
        no_bam                    = PARSE_TARGET_FEATURES.no_bam,
        r1_length                 = self.r1_length,
        r2_length                 = self.r2_length,
        subsample_rate            = self.subsample_rate,
        trim_polya_min_score      = self.trim_polya_min_score,
        trim_tso_min_score        = self.trim_tso_min_score,
        reference_info            = SETUP_REFERENCE_INFO.reference_info,
        target_panel_or_probe_set = PARSE_TARGET_FEATURES.target_panel_or_probe_set,
        target_set_name           = PARSE_TARGET_FEATURES.target_set_name,
    )

    call _SLFE_MATRIX_COMPUTER as _MATRIX_COMPUTER(
        count_inputs           = BUILD_SPATIAL_COUNT_INPUTS_STRUCT.count_inputs,
        gem_well               = 1,
        sample_id              = self.sample_id,
        chemistry_defs         = self.chemistry_defs,
        is_pd                  = self.is_pd,
        chunks                 = self.chunks,
        target_features        = PARSE_TARGET_FEATURES.target_gene_indices,
        feature_config         = self.feature_config,
        v1_pattern_fix_params  = self.v1_pattern_fix_params,
        barcode_index_override = self.barcode_index_output,
    )

    return (
        gene_index                 = WRITE_GENE_INDEX.gene_index,
        read_chunks                = self.chunks,
        parse_target_features_outs = PARSE_TARGET_FEATURES,
        matrix_computer_outs       = _MATRIX_COMPUTER,
        count_inputs               = BUILD_SPATIAL_COUNT_INPUTS_STRUCT.count_inputs,
    )
}

pipeline SPATIAL_POST_MATRIX_COMPUTATION(
    in  string                  sample_id,
    in  map[]                   sample_def,
    in  string                  slide_serial_capture_area,
    in  map[]                   chunks,
    in  map<ChemistryDef>       chemistry_defs,
    in  path                    reference_path,
    in  string                  sample_desc,
    in  bool                    no_secondary_analysis,
    in  bool                    filter_probes,
    in  string                  aligner,
    in  bool                    is_pd,
    in  json                    barcodes_under_tissue,
    in  float                   fraction_under_tissue,
    in  json                    alignment_metrics,
    in  json                    imaging_metrics,
    in  json                    tissue_image_shape,
    in  json                    segment_nuclei_metrics,
    in  jpg                     aligned_fiducials,
    in  png                     tissue_hires_img,
    in  png                     tissue_lowres_img,
    in  tiff                    cytassist_image,
    in  jpg                     detected_tissue_img,
    in  jpg                     qc_resampled_cyta_img,
    in  jpg                     qc_regist_target_img,
    in  jpg                     aligned_tissue_img,
    in  csv                     tissue_positions,
    in  json                    image_scale_factors,
    in  json                    tissue_transform_json,
    in  json                    tissue_registration_metrics,
    in  csv                     barcode_fluorescence_intensity,
    in  csv                     feature_reference,
    in  bool                    is_antibody_only,
    in  string                  reorientation_mode,
    in  bool                    include_introns,
    in  path                    loupe_alignment_file,
    in  file[]                  cytassist_image_paths,
    in  file[]                  tissue_image_paths,
    in  V1PatternFixArgs        v1_pattern_fix_args,
    in  json                    fraction_bc_outside_image,
    in  bool                    is_visium_hd,
    in  string                  visium_hd_slide_name,
    in  bool                    override_id,
    in  json                    hd_layout_data_json,
    in  int                     dark_images,
    in  txt                     fiducial_positions_list,
    in  json                    dzi_info,
    # NOTE: scales are a multiple of the pitch
    in  int[]                   scales,
    in  path[]                  dzi_tiles_paths,
    in  json                    scalefactors,
    in  json                    cytassist_run_metrics,
    in  string[]                image_page_names,
    in  json                    tissue_registration_transform,
    in  json                    fiducial_transform,
    in  tiff                    registration_target_image,
    in  UmiRegOutsSubset        umi_registration_outs,
    in  int                     custom_bin_size,
    in  string                  itk_error_string,
    in  bool                    grabcut_failed,
    in  bool                    disable_segmentation_in,
    in  int                     max_nucleus_diameter_px,
    in  geojson                 pipeline_generated_segmentations,
    in  SegmentationInputs      segmentation_inputs,
    in  CountInputs             count_inputs,
    in  CellCalling             cell_calling_config,
    in  _SLFE_MATRIX_COMPUTER   matrix_computer_outs,
    in  PARSE_TARGET_FEATURES   parse_target_features_outs,
    out bam                     possorted_genome_bam,
    out bam.bai                 possorted_genome_bai_index,
    out bam.csi                 possorted_genome_csi_index,
    out SpatialFolder           spatial,
    out json                    metrics_summary_json,
    out csv                     metrics_summary_csv,
    out csv                     feature_reference,
    out html                    web_summary,
    out json                    web_summary_json,
    out h5                      molecule_info,
    out h5                      filtered_gene_bc_matrices_h5,
    out path                    filtered_gene_bc_matrices_mex,
    out path                    analysis,
    out path                    analysis_csv,
    out int[]                   gem_groups,
    out csv                     filtered_barcodes,
    out csv                     per_feature_metrics_csv,
    out csv                     per_probe_metrics,
    out csv                     isotype_normalization_factors,
    out h5                      raw_probe_bc_matrix,
    out csv                     spatial_enrichment,
    out h5                      clustering_h5,
    out path                    deconvolution,
    out json                    raw_normalized_heatmap,
    out json                    isotype_scatter,
    out json                    gex_fbc_correlation_heatmap,
    out map<BinnedOutputsCs>    binned_outputs                      "Outputs at each bin level",
    out map<BinnedOutputs>      base_binned_outputs,
    out html                    hd_web_summary,
    out h5                      hd_feature_slice,
    out bool                    disable_binning,
    out map<BinLevelInfo>       bin_infos,
    out PROCESS_HD_ALIGNMENT    alignment_qc_outs,
    out json                    summary,
    out jpg                     websummary_tissue_image,
    out float                   websummary_tissue_image_scale,
    out bool                    no_segmentation_secondary_analysis,
    out MinimalSegmentedOutputs minimal_segmented_outs,
    out parquet                 barcode_mappings,
)
{
    call DISABLE_FEATURE_STAGES(
        sample_def          = self.sample_def,
        disable_multi       = true,
        disable_count       = true,
        in_disable_targeted = null,
        is_pd               = true,
        sample_outs         = null,
        multi_graph         = null,
    )

    call DISABLE_SD_ONLY_STAGES(
        disable_gex  = DISABLE_FEATURE_STAGES.disable_gex,
        is_visium_hd = self.is_visium_hd,
    )

    call _POST_MATRIX_COMPUTATION(
        count_inputs              = self.count_inputs,
        cell_calling_config       = self.cell_calling_config,
        gem_well                  = 1,
        sample_id                 = self.sample_id,
        chemistry_defs            = self.chemistry_defs,
        is_antibody_only          = self.is_antibody_only,
        slide_serial_capture_area = self.slide_serial_capture_area,
        is_pd                     = self.is_pd,
        chunks                    = self.chunks,
        target_panel_summary      = self.parse_target_features_outs.target_panel_summary,
        multi_config_sha          = null,
        disable_multi             = true,
        multi_graph               = null,
        is_spatial                = true,
        is_visium_hd              = self.is_visium_hd,
        matrix_computer_outs      = self.matrix_computer_outs,
    )

    call CHECK_CORRECTION_FACTOR(
        v1_pattern_fix = self.v1_pattern_fix_args,
        filtered_fbm   = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
    )

    call RUN_SPATIAL_ENRICHMENT(
        filtered_gene_bc_matrices_h5 = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        tissue_positions             = self.tissue_positions,
        image_scale_factors          = self.image_scale_factors,
    )

    call DISABLE_SECONDARY_ANALYSIS(
        is_spatial            = true,
        is_visium_hd_main_run = self.is_visium_hd,
        filtered_matrices_h5  = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        no_secondary_analysis = self.no_secondary_analysis,
    )

    call SC_RNA_ANALYZER as SPATIAL_RNA_ANALYZER(
        aggregate_barcodes = _POST_MATRIX_COMPUTATION.aggregate_barcodes,
        analyzer_inputs    = {
            aggr_library_info:          null,
            cbc_alpha:                  null,
            cbc_knn:                    null,
            cbc_realign_panorama:       null,
            cbc_sigma:                  null,
            chemistry_batch_correction: false,
            enable_tsne:                true,
            exclude_genes:              null,
            filtered_matrices_h5:       _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
            # NOTE: this is null because the cells are already forced in FILTER_BARCODES
            force_cells:                null,
            graphclust_neighbors:       null,
            graphclust_resolution:      null,
            is_pd:                      self.is_pd,
            is_spatial:                 true,
            # FIXME
            is_visium_hd:               false,
            max_clusters:               null,
            molecule_info:              _POST_MATRIX_COMPUTATION.molecule_info,
            neighbor_a:                 null,
            neighbor_b:                 null,
            no_secondary_analysis:      DISABLE_SECONDARY_ANALYSIS.no_secondary_analysis,
            num_analysis_bcs:           null,
            num_pca_bcs:                null,
            num_pca_genes:              null,
            num_principal_comps:        null,
            random_seed:                null,
            skip_multigenome_analysis:  true,
            tsne_input_pcs:             null,
            tsne_max_dims:              null,
            tsne_max_iter:              null,
            tsne_mom_switch_iter:       null,
            tsne_perplexity:            null,
            tsne_stop_lying_iter:       null,
            tsne_theta:                 null,
            umap_implementation:        "original",
            umap_input_pcs:             null,
            umap_max_dims:              null,
            umap_metric:                null,
            umap_min_dist:              null,
            umap_n_neighbors:           null,
            use_bcs:                    null,
            use_genes:                  null,
        },
    )

    call DECONVOLVE_SPOTS(
        filtered_matrix = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        analysis        = SPATIAL_RNA_ANALYZER.common_analyzer.analysis,
    ) using (
        disabled = DISABLE_SD_ONLY_STAGES.disable_deconvolution,
    )

    call _TARGETED_ANALYZER(
        molecule_info             = _POST_MATRIX_COMPUTATION.molecule_info,
        filtered_gene_bc_matrices = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        filtered_barcodes         = _POST_MATRIX_COMPUTATION.filtered_barcodes,
        basic_counter_summary     = _POST_MATRIX_COMPUTATION.summary,
        probe_set                 = self.parse_target_features_outs.probe_set,
        target_panel_summary      = self.parse_target_features_outs.target_panel_summary,
        is_spatial                = true,
        is_visium_hd              = self.is_visium_hd,
    ) using (
        disabled = self.parse_target_features_outs.disable_targeted,
    )

    call ANTIBODY_QC_PLOTS(
        filtered_matrix = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        raw_matrix      = self.matrix_computer_outs.raw_gene_bc_matrices_h5,
    ) using (
        disabled = DISABLE_FEATURE_STAGES.disable_antibody,
    )

    call SPATIAL_FOLDER_COLLECTOR(
        aligned_fiducials     = self.aligned_fiducials,
        detected_tissue_image = self.detected_tissue_img,
        scalefactors          = self.image_scale_factors,
        tissue_transform_json = self.tissue_transform_json,
        tissue_hires_image    = self.tissue_hires_img,
        tissue_lowres_image   = self.tissue_lowres_img,
        cytassist_image       = self.cytassist_image,
        qc_resampled_cyta_img = self.qc_resampled_cyta_img,
        qc_regist_target_img  = self.qc_regist_target_img,
        aligned_tissue_image  = self.aligned_tissue_img,
        tissue_positions      = self.tissue_positions,
        spatial_enrichment    = RUN_SPATIAL_ENRICHMENT.spatial_enrichment_csv,
        barcode_fluorescence_intensity = self.barcode_fluorescence_intensity,
        is_visium_hd          = self.is_visium_hd,
    )

    # For HD slides, bin the data at different scales and perform
    # secondary analysis at each of the bin levels
    call BIN_HD_DATA(
        spatial                      = SPATIAL_FOLDER_COLLECTOR.spatial,
        filtered_matrix_h5           = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        raw_matrix_h5                = self.matrix_computer_outs.raw_gene_bc_matrices_h5,
        counts_bc_order              = self.matrix_computer_outs.counts_bc_order,
        slfe_feature_reference       = self.matrix_computer_outs.slfe_feature_reference,
        barcode_summary_h5           = self.matrix_computer_outs.barcode_summary,
        molecule_info                = _POST_MATRIX_COMPUTATION.molecule_info,
        metrics_json                 = _POST_MATRIX_COMPUTATION.summary,
        raw_probe_bc_matrix_base_bin = _POST_MATRIX_COMPUTATION.raw_probe_bc_matrix,
        barcode_index                = self.matrix_computer_outs.barcode_index,
        *                            = self,
    )

    call WEBSUMMARY_ALERTS(
        loupe_alignment_file  = self.loupe_alignment_file,
        cytassist_image_paths = self.cytassist_image_paths,
        is_visium_hd          = self.is_visium_hd,
    )

    call COMPUTE_EXTENDED_SD_METRICS(
        barcode_summary   = self.matrix_computer_outs.barcode_summary,
        feature_bc_matrix = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
    ) using (
        disabled = DISABLE_SD_ONLY_STAGES.disable_sd_extra_metrics,
    )

    call MERGE_METRICS(
        summaries = [
            _POST_MATRIX_COMPUTATION.summary,
            SPATIAL_RNA_ANALYZER.common_analyzer.summary,
            self.alignment_metrics,
            self.tissue_registration_metrics,
            _TARGETED_ANALYZER.targeted_analysis_metrics,
            RUN_SPATIAL_ENRICHMENT.spatial_enrichment_json,
            self.fraction_bc_outside_image,
            ANTIBODY_QC_PLOTS.ab_qc_summary,
            BIN_HD_DATA.summary,
            BIN_HD_DATA.segmentation_metrics,
            COMPUTE_EXTENDED_SD_METRICS.extended_metrics,
            self.imaging_metrics,
            self.segment_nuclei_metrics,
        ],
    )

    call SPATIAL_REPORTER(
        summary                     = MERGE_METRICS.summary,
        sample_id                   = self.sample_id,
        slide_serial_info           = self.slide_serial_capture_area,
        sample_desc                 = self.sample_desc,
        chemistry_defs              = self.chemistry_defs,
        reference_path              = self.reference_path,
        barcode_summary_h5          = self.matrix_computer_outs.barcode_summary,
        filtered_barcodes           = _POST_MATRIX_COMPUTATION.filtered_barcodes,
        fraction_under_tissue       = self.fraction_under_tissue,
        feature_reference           = self.feature_reference,
        aligned_fiducials           = self.aligned_fiducials,
        matrix                      = self.matrix_computer_outs.raw_gene_bc_matrices_h5,
        analysis                    = SPATIAL_RNA_ANALYZER.common_analyzer.analysis,
        gem_groups                  = _POST_MATRIX_COMPUTATION.gem_groups,
        target_set_name             = self.parse_target_features_outs.target_set_name,
        targeting_method            = self.parse_target_features_outs.targeting_method,
        target_panel_summary        = self.parse_target_features_outs.target_panel_summary,
        antibody_histograms         = SPATIAL_RNA_ANALYZER.antibody_analyzer.antibody_histograms_json,
        antibody_treemap            = SPATIAL_RNA_ANALYZER.antibody_analyzer.antibody_treemap_json,
        raw_normalized_heatmap      = ANTIBODY_QC_PLOTS.raw_normalized_heatmap,
        isotype_scatter             = ANTIBODY_QC_PLOTS.isotype_scatter,
        gex_fbc_correlation_heatmap = ANTIBODY_QC_PLOTS.gex_fbc_correlation_heatmap,
        ab_qc_summary               = ANTIBODY_QC_PLOTS.ab_qc_summary,
        per_feature_metrics_csv     = _TARGETED_ANALYZER.per_feature_metrics_csv,
        reorientation_mode          = self.reorientation_mode,
        filter_probes               = self.filter_probes,
        include_introns             = self.include_introns,
        aligner                     = self.aligner,
        loupe_alignment_file        = self.loupe_alignment_file,
        scalefactors                = self.image_scale_factors,
        tissue_positions            = self.tissue_positions,
        tissue_image_paths          = self.tissue_image_paths,
        tissue_hires_image          = self.tissue_hires_img,
        tissue_lowres_image         = self.tissue_lowres_img,
        cytassist_image             = self.cytassist_image,
        detected_tissue_image       = self.detected_tissue_img,
        qc_resampled_cyta_img       = self.qc_resampled_cyta_img,
        qc_regist_target_img        = self.qc_regist_target_img,
        cytassist_image_paths       = self.cytassist_image_paths,
        v1_pattern_fix              = self.v1_pattern_fix_args,
        hd_layout_data_json         = self.hd_layout_data_json,
        override_id                 = self.override_id,
        slide_id_mismatch           = WEBSUMMARY_ALERTS.slide_id_mismatch,
        is_visium_hd                = self.is_visium_hd,
        cytassist_run_metrics       = self.cytassist_run_metrics,
        itk_error_string            = self.itk_error_string,
        grabcut_failed              = self.grabcut_failed,
    )

    # might need to feed the plots here or in the reporter
    call HD_WEBSUMMARY_BUILDER(
        sd_web_summary_json    = SPATIAL_REPORTER.web_summary_json,
        bin_level_metrics      = BIN_HD_DATA.bin_level_metrics,
        hd_feature_slice       = BIN_HD_DATA.hd_feature_slice_h5,
        scalefactors           = self.scalefactors,
        dark_images            = self.dark_images,
        tissue_hires_image     = SPATIAL_FOLDER_COLLECTOR.spatial.tissue_hires_image,
        analysis_h5            = BIN_HD_DATA.binned_outputs.analysis,
        saturation_plots       = BIN_HD_DATA.binned_outputs.saturation_plots,
        nucleus_segmentation_graphclust_diffexp = BIN_HD_DATA.nucleus_segmentation_graphclust_diffexp,
        segmentation_metrics   = BIN_HD_DATA.segmentation_metrics,
        minimal_segmented_outs = BIN_HD_DATA.minimal_segmented_outs,
    ) using (
        disabled = BIN_HD_DATA.disable_binning,
    )

    return (
        possorted_genome_bam          = _POST_MATRIX_COMPUTATION.possorted_genome_bam,
        possorted_genome_bai_index    = _POST_MATRIX_COMPUTATION.possorted_genome_bai_index,
        possorted_genome_csi_index    = _POST_MATRIX_COMPUTATION.possorted_genome_csi_index,
        molecule_info                 = _POST_MATRIX_COMPUTATION.molecule_info,
        filtered_gene_bc_matrices_h5  = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        filtered_gene_bc_matrices_mex = _POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_mex,
        filtered_barcodes             = _POST_MATRIX_COMPUTATION.filtered_barcodes,
        gem_groups                    = _POST_MATRIX_COMPUTATION.gem_groups,
        per_probe_metrics             = _POST_MATRIX_COMPUTATION.per_probe_metrics,
        isotype_normalization_factors = _POST_MATRIX_COMPUTATION.isotype_normalization_factors,
        raw_probe_bc_matrix           = _POST_MATRIX_COMPUTATION.raw_probe_bc_matrix,
        web_summary                   = SPATIAL_REPORTER.web_summary,
        web_summary_json              = SPATIAL_REPORTER.web_summary_json,
        spatial                       = SPATIAL_FOLDER_COLLECTOR.spatial,
        metrics_summary_json          = SPATIAL_REPORTER.metrics_summary_json,
        metrics_summary_csv           = SPATIAL_REPORTER.metrics_summary_csv,
        feature_reference             = SPATIAL_REPORTER.feature_reference,
        analysis                      = SPATIAL_RNA_ANALYZER.common_analyzer.analysis,
        analysis_csv                  = SPATIAL_RNA_ANALYZER.common_analyzer.analysis_csv,
        per_feature_metrics_csv       = _TARGETED_ANALYZER.per_feature_metrics_csv,
        spatial_enrichment            = RUN_SPATIAL_ENRICHMENT.spatial_enrichment_csv,
        clustering_h5                 = SPATIAL_RNA_ANALYZER.clustering_h5,
        deconvolution                 = DECONVOLVE_SPOTS.deconvolution,
        raw_normalized_heatmap        = ANTIBODY_QC_PLOTS.raw_normalized_heatmap,
        isotype_scatter               = ANTIBODY_QC_PLOTS.isotype_scatter,
        gex_fbc_correlation_heatmap   = ANTIBODY_QC_PLOTS.gex_fbc_correlation_heatmap,
        binned_outputs                = BIN_HD_DATA.binned_outputs,
        base_binned_outputs           = BIN_HD_DATA.binned_outputs,
        hd_web_summary                = HD_WEBSUMMARY_BUILDER.web_summary,
        websummary_tissue_image       = HD_WEBSUMMARY_BUILDER.websummary_tissue_image,
        websummary_tissue_image_scale = HD_WEBSUMMARY_BUILDER.websummary_tissue_image_scale,
        hd_feature_slice              = BIN_HD_DATA.hd_feature_slice_h5,
        disable_binning               = BIN_HD_DATA.disable_binning,
        bin_infos                     = BIN_HD_DATA.bin_infos,
        alignment_qc_outs             = BIN_HD_DATA.alignment_qc_outs,
        summary                       = BIN_HD_DATA.summary,
        minimal_segmented_outs        = BIN_HD_DATA.minimal_segmented_outs,
        no_segmentation_secondary_analysis = BIN_HD_DATA.no_segmentation_secondary_analysis,
        barcode_mappings              = BIN_HD_DATA.barcode_mappings,
    )
}

pipeline SPATIAL_RNA_COUNTER(
    in  string                  sample_id,
    in  map[]                   sample_def,
    in  string                  slide_serial_capture_area,
    in  map[]                   chunks,
    in  map<ChemistryDef>       chemistry_defs,
    in  path                    reference_path,
    in  int                     recovered_cells,
    in  int                     force_cells,
    in  string                  sample_desc,
    in  bool                    no_secondary_analysis,
    in  bool                    filter_probes,
    in  string                  aligner,
    in  bool                    is_pd,
    in  json                    barcodes_under_tissue,
    in  float                   fraction_under_tissue,
    in  json                    alignment_metrics,
    in  json                    imaging_metrics,
    in  json                    tissue_image_shape,
    in  json                    segment_nuclei_metrics,
    in  jpg                     aligned_fiducials,
    in  png                     tissue_hires_img,
    in  png                     tissue_lowres_img,
    in  tiff                    cytassist_image,
    in  jpg                     detected_tissue_img,
    in  jpg                     qc_resampled_cyta_img,
    in  jpg                     qc_regist_target_img,
    in  jpg                     aligned_tissue_img,
    in  csv                     tissue_positions,
    in  json                    image_scale_factors,
    in  json                    tissue_transform_json,
    in  json                    tissue_registration_metrics,
    in  csv                     barcode_fluorescence_intensity,
    in  csv                     feature_reference,
    in  bool                    is_antibody_only,
    in  string                  reorientation_mode,
    in  bool                    include_introns,
    in  path                    loupe_alignment_file,
    in  file[]                  cytassist_image_paths,
    in  file[]                  tissue_image_paths,
    in  V1PatternFixArgs        v1_pattern_fix_args,
    in  json                    fraction_bc_outside_image,
    in  bool                    is_visium_hd,
    in  string                  visium_hd_slide_name,
    in  bool                    override_id,
    in  json                    hd_layout_data_json,
    in  int                     dark_images,
    in  txt                     fiducial_positions_list,
    in  json                    dzi_info,
    # NOTE: scales are a multiple of the pitch
    in  int[]                   scales,
    in  path[]                  dzi_tiles_paths,
    in  json                    scalefactors,
    in  json                    cytassist_run_metrics,
    in  string[]                image_page_names,
    in  json                    tissue_registration_transform,
    in  json                    fiducial_transform,
    in  tiff                    registration_target_image,
    in  UmiRegOutsSubset        umi_registration_outs,
    in  int                     custom_bin_size,
    in  string                  itk_error_string,
    in  bool                    grabcut_failed,
    in  bool                    disable_segmentation_in,
    in  int                     max_nucleus_diameter_px,
    in  geojson                 pipeline_generated_segmentations,
    in  SegmentationInputs      segmentation_inputs,
    in  json                    gene_index,
    in  CountInputs             count_inputs,
    in  _SLFE_MATRIX_COMPUTER   matrix_computer_outs,
    in  PARSE_TARGET_FEATURES   parse_target_features_outs,
    out json                    gene_index,
    out path                    bam_header,
    out bam                     possorted_genome_bam,
    out bam.bai                 possorted_genome_bai_index,
    out bam.csi                 possorted_genome_csi_index,
    out SpatialFolder           spatial,
    out json                    metrics_summary_json,
    out csv                     metrics_summary_csv,
    out csv                     feature_reference,
    out html                    web_summary,
    out json                    web_summary_json,
    out h5                      barcode_summary,
    out h5                      molecule_info,
    out h5                      raw_gene_bc_matrices_h5,
    out path                    raw_gene_bc_matrices_mex,
    out h5                      filtered_gene_bc_matrices_h5,
    out path                    filtered_gene_bc_matrices_mex,
    out path                    analysis,
    out path                    analysis_csv,
    out ReadShards              read_shards,
    out int[]                   gem_groups,
    out csv                     filtered_barcodes,
    out csv                     barcode_correction_csv,
    out AnnotationFiles         annotation_files,
    out asf[]                   alignments,
    out map[]                   read_chunks,
    out csv                     per_barcode_metrics,
    out bool                    disable_targeted,
    out csv                     target_panel,
    out csv                     probe_set,
    out csv                     target_panel_or_probe_set,
    out string                  target_set_name,
    out string                  targeting_method,
    out csv                     per_feature_metrics_csv,
    out csv                     per_probe_metrics,
    out csv                     isotype_normalization_factors,
    out h5                      raw_probe_bc_matrix,
    out fa                      bait_fasta,
    out csv                     spatial_enrichment,
    out h5                      clustering_h5,
    out path                    deconvolution,
    out frf.bincode             slfe_feature_reference,
    out json                    raw_normalized_heatmap,
    out json                    isotype_scatter,
    out json                    gex_fbc_correlation_heatmap,
    # Shard files of feature x barcode counts sorted by barcode
    out csf[]                   counts_bc_order,
    out bool                    no_star_alignments,
    out bi.bincode              barcode_index,
    out map<BinnedOutputsCs>    binned_outputs                      "Outputs at each bin level",
    out map<BinnedOutputs>      base_binned_outputs,
    out html                    hd_web_summary,
    out h5                      hd_feature_slice,
    out bool                    disable_binning,
    out map<BinLevelInfo>       bin_infos,
    out PROCESS_HD_ALIGNMENT    alignment_qc_outs,
    out json                    summary,
    out jpg                     websummary_tissue_image,
    out float                   websummary_tissue_image_scale,
    out bool                    no_segmentation_secondary_analysis,
    out MinimalSegmentedOutputs minimal_segmented_outs,
    out parquet                 barcode_mappings,
)
{
    call SPATIAL_POST_MATRIX_COMPUTATION(
        cell_calling_config = {
            cell_barcodes:                        self.barcodes_under_tissue,
            disable_ab_aggregate_detection:       true,
            disable_high_occupancy_gem_detection: false,
            emptydrops_minimum_umis: {
                per_gem_well: null,
                per_sample:   null,
            },
            force_cells: {
                per_gem_well: self.force_cells,
                per_sample:   null,
            },
            global_minimum_umis: {
                per_gem_well: null,
                per_sample:   null,
            },
            max_mito_percent: {
                per_gem_well: null,
                per_sample:   null,
            },
            override_library_types:               null,
            override_mode:                        null,
            recovered_cells: {
                per_gem_well: self.recovered_cells,
                per_sample:   null,
            },
        },
        *                   = self,
    )

    return (
        read_chunks                   = self.chunks,
        gene_index                    = self.gene_index,
        bam_header                    = self.matrix_computer_outs.bam_header,
        barcode_summary               = self.matrix_computer_outs.barcode_summary,
        raw_gene_bc_matrices_h5       = self.matrix_computer_outs.raw_gene_bc_matrices_h5,
        raw_gene_bc_matrices_mex      = self.matrix_computer_outs.raw_gene_bc_matrices_mex,
        read_shards                   = self.matrix_computer_outs.read_shards,
        barcode_correction_csv        = self.matrix_computer_outs.barcode_correction_csv,
        annotation_files              = self.matrix_computer_outs.annotation_files,
        alignments                    = self.matrix_computer_outs.alignments,
        per_barcode_metrics           = self.matrix_computer_outs.per_barcode_metrics,
        counts_bc_order               = self.matrix_computer_outs.counts_bc_order,
        slfe_feature_reference        = self.matrix_computer_outs.slfe_feature_reference,
        no_star_alignments            = self.matrix_computer_outs.no_star_alignments,
        barcode_index                 = self.matrix_computer_outs.barcode_index,
        target_panel                  = self.parse_target_features_outs.target_panel,
        probe_set                     = self.parse_target_features_outs.probe_set,
        target_panel_or_probe_set     = self.parse_target_features_outs.target_panel_or_probe_set,
        target_set_name               = self.parse_target_features_outs.target_set_name,
        targeting_method              = self.parse_target_features_outs.targeting_method,
        bait_fasta                    = self.parse_target_features_outs.bait_fasta,
        disable_targeted              = self.parse_target_features_outs.disable_targeted,
        possorted_genome_bam          = SPATIAL_POST_MATRIX_COMPUTATION.possorted_genome_bam,
        possorted_genome_bai_index    = SPATIAL_POST_MATRIX_COMPUTATION.possorted_genome_bai_index,
        possorted_genome_csi_index    = SPATIAL_POST_MATRIX_COMPUTATION.possorted_genome_csi_index,
        molecule_info                 = SPATIAL_POST_MATRIX_COMPUTATION.molecule_info,
        filtered_gene_bc_matrices_h5  = SPATIAL_POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_h5,
        filtered_gene_bc_matrices_mex = SPATIAL_POST_MATRIX_COMPUTATION.filtered_gene_bc_matrices_mex,
        filtered_barcodes             = SPATIAL_POST_MATRIX_COMPUTATION.filtered_barcodes,
        gem_groups                    = SPATIAL_POST_MATRIX_COMPUTATION.gem_groups,
        per_probe_metrics             = SPATIAL_POST_MATRIX_COMPUTATION.per_probe_metrics,
        isotype_normalization_factors = SPATIAL_POST_MATRIX_COMPUTATION.isotype_normalization_factors,
        raw_probe_bc_matrix           = SPATIAL_POST_MATRIX_COMPUTATION.raw_probe_bc_matrix,
        web_summary                   = SPATIAL_POST_MATRIX_COMPUTATION.web_summary,
        web_summary_json              = SPATIAL_POST_MATRIX_COMPUTATION.web_summary_json,
        spatial                       = SPATIAL_POST_MATRIX_COMPUTATION.spatial,
        metrics_summary_json          = SPATIAL_POST_MATRIX_COMPUTATION.metrics_summary_json,
        metrics_summary_csv           = SPATIAL_POST_MATRIX_COMPUTATION.metrics_summary_csv,
        feature_reference             = SPATIAL_POST_MATRIX_COMPUTATION.feature_reference,
        analysis                      = SPATIAL_POST_MATRIX_COMPUTATION.analysis,
        analysis_csv                  = SPATIAL_POST_MATRIX_COMPUTATION.analysis_csv,
        per_feature_metrics_csv       = SPATIAL_POST_MATRIX_COMPUTATION.per_feature_metrics_csv,
        spatial_enrichment            = SPATIAL_POST_MATRIX_COMPUTATION.spatial_enrichment,
        clustering_h5                 = SPATIAL_POST_MATRIX_COMPUTATION.clustering_h5,
        deconvolution                 = SPATIAL_POST_MATRIX_COMPUTATION.deconvolution,
        raw_normalized_heatmap        = SPATIAL_POST_MATRIX_COMPUTATION.raw_normalized_heatmap,
        isotype_scatter               = SPATIAL_POST_MATRIX_COMPUTATION.isotype_scatter,
        gex_fbc_correlation_heatmap   = SPATIAL_POST_MATRIX_COMPUTATION.gex_fbc_correlation_heatmap,
        binned_outputs                = SPATIAL_POST_MATRIX_COMPUTATION.binned_outputs,
        base_binned_outputs           = SPATIAL_POST_MATRIX_COMPUTATION.base_binned_outputs,
        hd_web_summary                = SPATIAL_POST_MATRIX_COMPUTATION.hd_web_summary,
        websummary_tissue_image       = SPATIAL_POST_MATRIX_COMPUTATION.websummary_tissue_image,
        websummary_tissue_image_scale = SPATIAL_POST_MATRIX_COMPUTATION.websummary_tissue_image_scale,
        hd_feature_slice              = SPATIAL_POST_MATRIX_COMPUTATION.hd_feature_slice,
        disable_binning               = SPATIAL_POST_MATRIX_COMPUTATION.disable_binning,
        bin_infos                     = SPATIAL_POST_MATRIX_COMPUTATION.bin_infos,
        alignment_qc_outs             = SPATIAL_POST_MATRIX_COMPUTATION.alignment_qc_outs,
        summary                       = SPATIAL_POST_MATRIX_COMPUTATION.summary,
        minimal_segmented_outs        = SPATIAL_POST_MATRIX_COMPUTATION.minimal_segmented_outs,
        no_segmentation_secondary_analysis = SPATIAL_POST_MATRIX_COMPUTATION.no_segmentation_secondary_analysis,
        barcode_mappings              = SPATIAL_POST_MATRIX_COMPUTATION.barcode_mappings,
    )
}
