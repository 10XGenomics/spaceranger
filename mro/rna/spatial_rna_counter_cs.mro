#
# Copyright (c) 2019 10X Genomics, Inc. All rights reserved.
#

@include "spatial_rna_counter.mro"
@include "spatial_rna_counter_prep.mro"
@include "spatial_segmentation.mro"
@include "_common_cloupe_stages.mro"
@include "_spatial_cloupe_stages.mro"
@include "_spatial_hd_binning.mro"
@include "_spatial_imaging_cs.mro"
@include "_spatial_imaging_stages.mro"
@include "_spatial_preflights.mro"

pipeline SPATIAL_RNA_COUNTER_CS(
    in  string                sample_id                      "A unique run id",
    in  map[]                 sample_def                     "Sample definition",
    in  csv                   target_set                     "Target set CSV",
    in  string                target_set_name                "Name of the target set",
    in  string                sample_desc                    "Sample description to embed in output files",
    in  string                slide_serial_capture_area      "Slide serial number and area id",
    in  path                  loupe_alignment_file           "Path to Loupe-generated manual alignment file",
    in  gpr                   gpr_file                       "Slide GPR file",
    in  vlf                   hd_layout_file                 "Layout file for Visium HD",
    in  path                  reference_path                 "Path to reference",
    in  bool                  no_bam                         "Skip generating BAM file outputs",
    in  bool                  no_secondary_analysis          "Flag to disable clustering and dimensionality reduction",
    in  bool                  filter_probes                  "Filter the probe set",
    in  int                   r1_length                      "Trim input R1 to this length (optional)",
    in  int                   r2_length                      "Trim input R2 to this length (optional)",
    in  string                targeting_method               "Either 'templated_ligation' or 'hybrid_capture'",
    in  string                aligner                        "Either 'star' or 'hurtle'",
    in  string                chemistry                      "Identifies the whitelist and slide revision",
    in  int                   trim_polya_min_score,
    in  int                   trim_tso_min_score,
    in  csv                   feature_reference,
    in  file[]                tissue_image_paths             "Path to brightfield slide image or fluorescence (dark) images",
    in  int                   dark_images                    "null or 0 for brightfield, 1 for fluoro channels, 2 for single pre-colorized image",
    in  string[]              image_page_names               "Name(s) of each page of the dark image",
    in  string                reorientation_mode             "Set rotation or rotation+mirror to reorient input images",
    in  file[]                cytassist_image_paths          "Image generated by CytAssist instrument",
    in  int                   dapi_channel_index             "Index of the DAPI channel if the tissue image is dark image",
    in  bool                  skip_tissue_detection          "Skip tissue segmentation and analyze all spots",
    in  bool                  include_introns                "Include introns during UMI counting",
    in  int                   custom_bin_size                "Bin HD data at the supplied bin level in addition to the standard binning levels",
    in  float                 image_scale                    "Pixel size in microns per pixel of tissue image",
    in  bool                  override_id                    "True if the slide-ID provided in the Cytassist Image Metadata should be overridden",
    in  bool                  skip_segmentation              "Skip nucleus segmentation",
    in  SegmentationInputs    segmentation_inputs            "Inputs for nucleus segmentation",
    in  V1PatternFixArgs      v1_pattern_fix                 "Previous filtered_feature_bc_matrix for pattern fix and type (only if instructed by support to use)",
    in  UmiRegistrationInputs umi_registration               "Inputs for UMI registration",
    out html                  web_summary                    "Run summary HTML",
    out SpatialFolder         spatial                        "Outputs of spatial pipeline",
    out csv                   metrics_summary                "Run summary CSV",
    out bam                   possorted_genome_bam           "BAM"                       "possorted_genome_bam.bam",
    out bam.bai               possorted_genome_bai_index     "BAM BAI index"             "possorted_genome_bam.bam.bai",
    out bam.csi               possorted_genome_csi_index     "BAM CSI index"             "possorted_genome_bam.bam.csi",
    out path                  filtered_feature_bc_matrix     "Filtered feature-barcode matrices MEX",
    out h5                    filtered_feature_bc_matrix_h5  "Filtered feature-barcode matrices HDF5"  "filtered_feature_bc_matrix.h5",
    out path                  raw_feature_bc_matrix          "Unfiltered feature-barcode matrices MEX",
    out h5                    raw_feature_bc_matrix_h5       "Unfiltered feature-barcode matrices HDF5"  "raw_feature_bc_matrix.h5",
    out path                  analysis                       "Secondary analysis output CSV",
    out h5                    molecule_info                  "Per-molecule read information",
    out cloupe                cloupe                         "Loupe Browser file",
    out csv                   feature_reference              "Feature Reference",
    out csv                   target_panel                   "Target Panel file",
    out csv                   probe_set                      "Probe Set file",
    out csv                   isotype_normalization_factors  "Normalization factors used to normalize AB counts",
    out path                  deconvolution                  "Deconvolution directory",
    out h5                    raw_probe_bc_matrix            "Raw probe barcode matrix",
    out h5                    feature_slice                  "Feature Slice matrix",
    out map<BinnedOutputsCs>  binned_outputs                 "Outputs at each bin level",
    out SegmentedOutputsCs    segmented_outputs              "Outputs of analyses on nuclear segmented cells",
    out parquet               barcode_mappings               "File giving the mapping of every barcode to the bins and segmented cells",
    out cloupe                cloupe_008um                   "Loupe Browser file (8um bin size)",
    out cloupe                cloupe_custom                  "Loupe Browser file (custom bin size)",
    out cloupe                cloupe_cell                    "Loupe Browser file (segmented cells)",
    out string                pipestance_type                "Name of this pipeline",
)
{
    call SPACERANGER_PREFLIGHT(
        sample_def                = self.sample_def,
        target_set                = self.target_set,
        reference_path            = self.reference_path,
        feature_reference         = self.feature_reference,
        recovered_cells           = null,
        force_cells               = null,
        r1_length                 = self.r1_length,
        r2_length                 = self.r2_length,
        tissue_image_paths        = self.tissue_image_paths,
        dark_images               = self.dark_images,
        dapi_channel_index        = self.dapi_channel_index,
        loupe_alignment_file      = self.loupe_alignment_file,
        gpr_file                  = self.gpr_file,
        hd_layout_file            = self.hd_layout_file,
        cytassist_image_paths     = self.cytassist_image_paths,
        cytassist_tgz_path        = null,
        check_cytassist_sizes     = true,
        slide_serial_capture_area = self.slide_serial_capture_area,
        targeting_method          = self.targeting_method,
        chemistry                 = self.chemistry,
        custom_chemistry_def      = null,
        v1_pattern_fix            = self.v1_pattern_fix,
        hd_log_umi_image          = null,
        image_scale               = self.image_scale,
        is_pd                     = false,
        segmentation_inputs       = self.segmentation_inputs,
        override_id               = self.override_id,
    ) using (
        preflight = true,
    )

    call SPACERANGER_PREFLIGHT_LOCAL(
        sample_def                = self.sample_def,
        target_set                = self.target_set,
        reference_path            = self.reference_path,
        feature_reference         = self.feature_reference,
        recovered_cells           = null,
        force_cells               = null,
        r1_length                 = self.r1_length,
        r2_length                 = self.r2_length,
        tissue_image_paths        = self.tissue_image_paths,
        dark_images               = self.dark_images,
        loupe_alignment_file      = self.loupe_alignment_file,
        gpr_file                  = self.gpr_file,
        hd_layout_file            = self.hd_layout_file,
        cytassist_image_paths     = self.cytassist_image_paths,
        slide_serial_capture_area = self.slide_serial_capture_area,
        targeting_method          = self.targeting_method,
        chemistry                 = self.chemistry,
        custom_chemistry_def      = null,
        v1_pattern_fix            = self.v1_pattern_fix,
        is_pd                     = false,
    ) using (
        local     = true,
        preflight = true,
    )

    call FIX_CYTASSIST_IMAGE_COMPATIBILITY(
        cytassist_image_paths_in = self.cytassist_image_paths,
    )

    call SPATIAL_RNA_COUNTER_PREP(
        sample_id            = self.sample_id,
        sample_def           = self.sample_def,
        chemistry            = self.chemistry,
        custom_chemistry_def = null,
        r1_length            = self.r1_length,
        r2_length            = self.r2_length,
        is_pd                = false,
        allowed_chems        = [
            "SPATIAL3Pv1",
            "SPATIAL3Pv2",
            "SPATIAL3Pv3",
            "SPATIAL3Pv4",
            "SPATIAL3Pv5",
            "SPATIAL-HD-v1",
            "SPATIAL-HD-v1-3P",
        ],
        reference_path       = self.reference_path,
        v1_pattern_fix_args  = self.v1_pattern_fix,
    )

    call USER_PROVIDED_SEGMENTATIONS(
        * = self.segmentation_inputs,
    )

    call SPATIAL_MATRIX_COMPUTER(
        sample_id             = self.sample_id,
        target_set            = self.target_set,
        target_set_name       = self.target_set_name,
        chunks                = SPATIAL_RNA_COUNTER_PREP.chunks,
        chemistry_defs        = SPATIAL_RNA_COUNTER_PREP.chemistry_defs,
        subsample_rate        = null,
        initial_reads         = null,
        no_bam                = self.no_bam,
        filter_probes         = self.filter_probes,
        aligner               = self.aligner,
        is_pd                 = false,
        include_introns       = self.include_introns,
        reference_path        = self.reference_path,
        is_antibody_only      = SPATIAL_RNA_COUNTER_PREP.is_antibody_only,
        r1_length             = self.r1_length,
        r2_length             = self.r2_length,
        trim_polya_min_score  = self.trim_polya_min_score,
        trim_tso_min_score    = self.trim_tso_min_score,
        feature_reference     = self.feature_reference,
        feature_config        = null,
        v1_pattern_fix_params = SPATIAL_RNA_COUNTER_PREP.v1_pattern_fix_params,
        barcode_index_output  = SPATIAL_RNA_COUNTER_PREP.barcode_index_output,
    )

    call _SPATIAL_IMAGING_CS as SPATIAL_IMAGING_CS(
        slide_serial_capture_area = self.slide_serial_capture_area,
        loupe_alignment_file      = self.loupe_alignment_file,
        gpr_file                  = self.gpr_file,
        hd_layout_file            = self.hd_layout_file,
        reorientation_mode        = self.reorientation_mode,
        tissue_image_paths        = self.tissue_image_paths,
        cytassist_image_paths     = FIX_CYTASSIST_IMAGE_COMPATIBILITY.cytassist_image_paths,
        tissue_image_pixel_size   = self.image_scale,
        dark_images               = self.dark_images,
        dapi_channel_index        = self.dapi_channel_index,
        barcode_whitelist         = SPATIAL_RNA_COUNTER_PREP.barcode_whitelist,
        visium_hd_slide_name      = SPATIAL_RNA_COUNTER_PREP.visium_hd_slide_name,
        image_page_names          = self.image_page_names,
        skip_tissue_detection     = self.skip_tissue_detection,
        skip_segmentation         = self.skip_segmentation,
        max_nucleus_diameter_px   = self.segmentation_inputs.max_nucleus_diameter_px,
        segmentation_from_user    = USER_PROVIDED_SEGMENTATIONS.segmentation_from_user,
        raw_feature_bc_matrix_h5  = SPATIAL_MATRIX_COMPUTER.matrix_computer_outs.raw_gene_bc_matrices_h5,
        umi_registration_inputs   = self.umi_registration,
    )

    call CLOUPE_TILE_IMAGES(
        loupe_alignment_file  = self.loupe_alignment_file,
        tissue_image_paths    = SPATIAL_IMAGING_CS.cloupe_display_image_paths,
        tile_size             = 512,
        skip_stage            = false,
        no_secondary_analysis = false,
    ) using (
        volatile = true,
    )

    call SPATIAL_RNA_COUNTER(
        sample_id                     = self.sample_id,
        sample_def                    = self.sample_def,
        sample_desc                   = self.sample_desc,
        slide_serial_capture_area     = self.slide_serial_capture_area,
        chunks                        = SPATIAL_RNA_COUNTER_PREP.chunks,
        chemistry_defs                = SPATIAL_RNA_COUNTER_PREP.chemistry_defs,
        no_secondary_analysis         = self.no_secondary_analysis,
        filter_probes                 = self.filter_probes,
        aligner                       = self.aligner,
        is_pd                         = false,
        include_introns               = self.include_introns,
        reference_path                = self.reference_path,
        is_antibody_only              = SPATIAL_RNA_COUNTER_PREP.is_antibody_only,
        recovered_cells               = null,
        force_cells                   = null,
        barcodes_under_tissue         = SPATIAL_IMAGING_CS.barcodes_under_tissue,
        alignment_metrics             = SPATIAL_IMAGING_CS.alignment_metrics,
        aligned_fiducials             = SPATIAL_IMAGING_CS.aligned_fiducials,
        tissue_hires_img              = SPATIAL_IMAGING_CS.tissue_hires_image,
        tissue_lowres_img             = SPATIAL_IMAGING_CS.tissue_lowres_image,
        cytassist_image               = SPATIAL_IMAGING_CS.cytassist_image,
        detected_tissue_img           = SPATIAL_IMAGING_CS.detected_tissue_image,
        qc_resampled_cyta_img         = SPATIAL_IMAGING_CS.qc_resampled_cyta_img,
        qc_regist_target_img          = SPATIAL_IMAGING_CS.qc_regist_target_img,
        aligned_tissue_img            = SPATIAL_IMAGING_CS.aligned_tissue_image,
        tissue_positions              = SPATIAL_IMAGING_CS.tissue_positions,
        tissue_transform_json         = null,
        tissue_registration_metrics   = SPATIAL_IMAGING_CS.tissue_registration_metrics,
        image_scale_factors           = SPATIAL_IMAGING_CS.image_scalefactors,
        fraction_under_tissue         = SPATIAL_IMAGING_CS.fraction_under_tissue,
        barcode_fluorescence_intensity = SPATIAL_IMAGING_CS.barcode_fluorescence_intensity,
        feature_reference             = self.feature_reference,
        reorientation_mode            = self.reorientation_mode,
        loupe_alignment_file          = self.loupe_alignment_file,
        cytassist_image_paths         = FIX_CYTASSIST_IMAGE_COMPATIBILITY.cytassist_image_paths,
        tissue_image_paths            = SPATIAL_IMAGING_CS.cloupe_display_image_paths,
        v1_pattern_fix_args           = self.v1_pattern_fix,
        fraction_bc_outside_image     = SPATIAL_IMAGING_CS.fraction_bc_outside_image,
        is_visium_hd                  = SPATIAL_IMAGING_CS.is_visium_hd,
        hd_layout_data_json           = SPATIAL_IMAGING_CS.hd_layout_data_json,
        visium_hd_slide_name          = SPATIAL_RNA_COUNTER_PREP.visium_hd_slide_name,
        override_id                   = self.override_id,
        fiducial_positions_list       = SPATIAL_IMAGING_CS.fiducial_positions_list,
        scalefactors                  = SPATIAL_IMAGING_CS.image_scalefactors,
        cytassist_run_metrics         = SPATIAL_IMAGING_CS.cytassist_run_metrics,
        dark_images                   = self.dark_images,
        dzi_info                      = CLOUPE_TILE_IMAGES.dzi_info,
        dzi_tiles_paths               = CLOUPE_TILE_IMAGES.dzi_tiles_paths,
        image_page_names              = SPATIAL_IMAGING_CS.cloupe_image_page_names,
        custom_bin_size               = self.custom_bin_size,
        scales                        = [
            1,
            4,
            8,
        ],
        tissue_registration_transform = SPATIAL_IMAGING_CS.tissue_transform_json,
        fiducial_transform            = SPATIAL_IMAGING_CS.fiducial_transform,
        registration_target_image     = SPATIAL_IMAGING_CS.registration_target_image,
        umi_registration_outs         = null,
        itk_error_string              = SPATIAL_IMAGING_CS.itk_error_string,
        grabcut_failed                = SPATIAL_IMAGING_CS.grabcut_failed,
        disable_segmentation_in       = SPATIAL_IMAGING_CS.disable_segmentation,
        pipeline_generated_segmentations = SPATIAL_IMAGING_CS.pipeline_generated_segmentations,
        segmentation_inputs           = self.segmentation_inputs,
        imaging_metrics               = SPATIAL_IMAGING_CS.imaging_metrics,
        tissue_image_shape            = SPATIAL_IMAGING_CS.tissue_image_shape,
        segment_nuclei_metrics        = SPATIAL_IMAGING_CS.segment_nuclei_metrics,
        max_nucleus_diameter_px       = SPATIAL_IMAGING_CS.max_nucleus_diameter_px_used,
        gene_index                    = SPATIAL_MATRIX_COMPUTER.gene_index,
        count_inputs                  = SPATIAL_MATRIX_COMPUTER.count_inputs,
        matrix_computer_outs          = SPATIAL_MATRIX_COMPUTER.matrix_computer_outs,
        parse_target_features_outs    = SPATIAL_MATRIX_COMPUTER.parse_target_features_outs,
    )

    call CLOUPE_PREPROCESS(
        pipestance_type              = "SPATIAL_RNA_COUNTER_CS",
        sample_id                    = self.sample_id,
        sample_desc                  = self.sample_desc,
        analysis                     = SPATIAL_RNA_COUNTER.analysis,
        filtered_gene_bc_matrices_h5 = SPATIAL_RNA_COUNTER.filtered_gene_bc_matrices_h5,
        metrics_json                 = SPATIAL_RNA_COUNTER.metrics_summary_json,
        aggregation_csv              = null,
        gem_group_index_json         = null,
        image_page_names             = SPATIAL_IMAGING_CS.cloupe_image_page_names,
        tissue_image_paths           = SPATIAL_IMAGING_CS.cloupe_display_image_paths,
        dark_images                  = self.dark_images,
        tissue_positions             = SPATIAL_IMAGING_CS.tissue_positions,
        fiducial_positions_list      = SPATIAL_IMAGING_CS.fiducial_positions_list,
        dzi_info                     = CLOUPE_TILE_IMAGES.dzi_info,
        dzi_tiles_paths              = CLOUPE_TILE_IMAGES.dzi_tiles_paths,
        scale_factors_json           = SPATIAL_IMAGING_CS.image_scalefactors,
        no_secondary_analysis        = false,
        barcode_whitelist            = SPATIAL_RNA_COUNTER_PREP.barcode_whitelist,
        hd_slide_name                = SPATIAL_RNA_COUNTER_PREP.visium_hd_slide_name,
        loupe_map                    = null,
        product_type                 = "sp",
        cells_per_sample             = null,
        cells_per_tag                = null,
        cells_per_protospacer        = null,
        spatial_enrichment           = SPATIAL_RNA_COUNTER.spatial_enrichment,
        spatial_deconvolution_path   = SPATIAL_RNA_COUNTER.deconvolution,
        disable_cloupe               = null,
        matrix_type                  = null,
        spatial_cell_segment_mask    = null,
        spatial_cell_segment_geojson = null,
    )

    call PICK_SPATIAL_COUNTER_OUTS(
        filtered_feature_bc_matrix_h5_in = SPATIAL_RNA_COUNTER.filtered_gene_bc_matrices_h5,
        filtered_feature_bc_matrix_mex_in = SPATIAL_RNA_COUNTER.filtered_gene_bc_matrices_mex,
        raw_feature_bc_matrix_h5_in  = SPATIAL_RNA_COUNTER.raw_gene_bc_matrices_h5,
        raw_feature_bc_matrix_mex_in = SPATIAL_RNA_COUNTER.raw_gene_bc_matrices_mex,
        raw_probe_bc_matrix_h5_in    = SPATIAL_RNA_COUNTER.raw_probe_bc_matrix,
        cloupe_files                 = SPATIAL_RNA_COUNTER.binned_outputs.cloupe,
        is_visium_hd                 = SPATIAL_IMAGING_CS.is_visium_hd,
        custom_bin_size              = self.custom_bin_size,
        sd_web_summary               = SPATIAL_RNA_COUNTER.web_summary,
        hd_web_summary               = SPATIAL_RNA_COUNTER.hd_web_summary,
    )

    return (
        possorted_genome_bam          = SPATIAL_RNA_COUNTER.possorted_genome_bam,
        possorted_genome_bai_index    = SPATIAL_RNA_COUNTER.possorted_genome_bai_index,
        possorted_genome_csi_index    = SPATIAL_RNA_COUNTER.possorted_genome_csi_index,
        web_summary                   = PICK_SPATIAL_COUNTER_OUTS.web_summary,
        spatial                       = SPATIAL_RNA_COUNTER.spatial,
        metrics_summary               = SPATIAL_RNA_COUNTER.metrics_summary_csv,
        raw_feature_bc_matrix         = PICK_SPATIAL_COUNTER_OUTS.raw_feature_bc_matrix_mex_out,
        raw_feature_bc_matrix_h5      = PICK_SPATIAL_COUNTER_OUTS.raw_feature_bc_matrix_h5_out,
        filtered_feature_bc_matrix    = PICK_SPATIAL_COUNTER_OUTS.filtered_feature_bc_matrix_mex_out,
        filtered_feature_bc_matrix_h5 = PICK_SPATIAL_COUNTER_OUTS.filtered_feature_bc_matrix_h5_out,
        analysis                      = SPATIAL_RNA_COUNTER.analysis_csv,
        molecule_info                 = SPATIAL_RNA_COUNTER.molecule_info,
        cloupe                        = CLOUPE_PREPROCESS.output_for_cloupe,
        feature_reference             = SPATIAL_RNA_COUNTER.feature_reference,
        target_panel                  = SPATIAL_RNA_COUNTER.target_panel,
        probe_set                     = SPATIAL_RNA_COUNTER.probe_set,
        deconvolution                 = SPATIAL_RNA_COUNTER.deconvolution,
        raw_probe_bc_matrix           = PICK_SPATIAL_COUNTER_OUTS.raw_probe_bc_matrix_h5_out,
        isotype_normalization_factors = SPATIAL_RNA_COUNTER.isotype_normalization_factors,
        feature_slice                 = SPATIAL_RNA_COUNTER.hd_feature_slice,
        binned_outputs                = SPATIAL_RNA_COUNTER.binned_outputs,
        barcode_mappings              = SPATIAL_RNA_COUNTER.barcode_mappings,
        cloupe_008um                  = PICK_SPATIAL_COUNTER_OUTS.cloupe_008um,
        cloupe_custom                 = PICK_SPATIAL_COUNTER_OUTS.cloupe_custom,
        cloupe_cell                   = SPATIAL_RNA_COUNTER.minimal_segmented_outs.cloupe,
        segmented_outputs             = SPATIAL_RNA_COUNTER.minimal_segmented_outs,
        pipestance_type               = "SPATIAL_RNA_COUNTER_CS",
    )
}
