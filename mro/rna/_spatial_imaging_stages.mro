#
# Copyright (c) 2023 10X Genomics, Inc. All rights reserved.
#

filetype jpg;
filetype png;
filetype tiff;
filetype txt;
filetype json;
filetype html;
filetype h5;
filetype csv;
filetype gpr;
filetype vlf;

struct PipelineMode(
    string product,
    string slide,
)

struct HdLayoutOffset(
    float x_offset,
    float y_offset,
)

struct UmiRegistrationInputs(
    bool           disable,
    HdLayoutOffset offset,
)

stage GET_CYTASSIST_RUN_METADATA(
    in  file[] cytassist_image_paths,
    out json   cytassist_run_metrics,
    src py     "stages/spatial/get_cytassist_run_metadata",
) using (
    volatile = strict,
)

stage DISABLE_IMAGING_STAGES(
    in  bool                  is_visium_hd,
    in  bool                  skip_segmentation,
    in  bool                  segmentation_from_user,
    in  int                   dark_images,
    in  file[]                tissue_image_paths,
    in  UmiRegistrationInputs umi_registration_inputs_in,
    out bool                  disable_imaging_stages,
    out bool                  disable_segmentation,
    out UmiRegistrationInputs umi_registration_inputs,
    src py                    "stages/spatial/disable_imaging_stages",
) using (
    mem_gb   = 2,
    vmem_gb  = 32,
    volatile = strict,
)

stage FIX_CYTASSIST_IMAGE_COMPATIBILITY(
    in  file[] cytassist_image_paths_in,
    out file[] cytassist_image_paths,
    src py     "stages/spatial/fix_cytassist_image_compatibility",
) using (
    volatile = strict,
)

stage DETERMINE_PIPELINE_MODE(
    in  file[]       tissue_image_paths,
    in  file[]       cytassist_image_paths,
    in  string       visium_hd_slide_name,
    in  string       barcode_whitelist,
    out PipelineMode pipeline_mode,
    out bool         is_visium_hd,
    out bool         is_visium_sd,
    src py           "stages/spatial/determine_pipeline_mode",
) using (
    volatile = strict,
)

stage STANDARDIZE_IMAGES(
    in  PipelineMode pipeline_mode,
    in  file[]       tissue_image_paths,
    in  file[]       cytassist_image_paths,
    in  int          dark_images,
    in  int          dapi_channel_index,
    in  path         loupe_alignment_file,
    in  bool         read_metadata_from_tissue_image,
    in  float        tissue_image_pixel_size_in,
    out json         scalefactors_json,
    out json         crop_info_json,
    out png          fiducials_detection_image,
    out png          tissue_detection_grayscale_image,
    out png          tissue_detection_saturation_image,
    out png          qc_cytassist_crop_image,
    out tiff         registration_target_image,
    out tiff         cytassist_image,
    out bool         skip_tissue_registration,
    out float        tissue_image_pixel_size,
    out png          tissue_hires_image,
    out png          tissue_lowres_image,
    out file[]       cloupe_display_image_paths,
    src py           "stages/spatial/standardize_images",
) split (
) using (
    mem_gb   = 3,
    vmem_gb  = 64,
    volatile = strict,
)

stage LOUPE_ALIGNMENT_READER(
    in  path         loupe_alignment_file,
    in  PipelineMode pipeline_mode,
    in  json         scalefactors_json,
    out json         loupe_spots_data_json,
    out json         loupe_cyta_data_json,
    out json         hd_slide_layout_json,
    out string[]     image_page_names,
    src py           "stages/spatial/loupe_alignment_reader",
) split (
) using (
    volatile = strict,
)

stage GPR_READER(
    in  string slide_serial_capture_area,
    in  gpr    gpr_file,
    in  string barcode_whitelist,
    in  json   loupe_spots_data_json,
    out json   gpr_spots_data_json,
    src py     "stages/spatial/gpr_reader",
) using (
    volatile = strict,
)

stage HD_LAYOUT_READER(
    in  string       slide_serial_capture_area,
    in  vlf          hd_layout_file,
    in  string       visium_hd_slide_name,
    in  json         loupe_hd_slide_layout_json,
    in  bool         is_pd,
    in  PipelineMode pipeline_mode,
    out json         hd_layout_data_json,
    src py           "stages/spatial/hd_layout_reader",
) using (
    volatile = strict,
)

stage ALIGN_FIDUCIALS(
    in  PipelineMode pipeline_mode,
    in  png          fiducials_detection_image,
    in  json         gpr_spots_data_json,
    in  json         hd_layout_data_json,
    in  json         loupe_spots_data_json,
    in  string       visium_hd_slide_name,
    in  string       reorientation_mode,
    in  json         crop_info_json,
    in  bool         is_visium_hd,
    out json         registered_spots_data_json,
    out json         fiducial_alignment_metrics,
    out json         transform_matrix,
    out map<file>    qc_detected_fiducials_images,
    out jpg          qc_aligned_fiducials_image,
    out jpg          qc_fiducial_error_image,
    out float[][]    fid_perp_tmat,
    src py           "stages/spatial/align_fiducials",
) split (
) using (
    volatile = strict,
) retain (
    qc_detected_fiducials_images,
)

stage DETECT_TISSUE(
    in  PipelineMode pipeline_mode,
    in  png          tissue_detection_grayscale_image,
    in  png          tissue_detection_saturation_image,
    in  bool         skip_tissue_detection,
    in  bool         ignore_loupe_tissue_detection,
    in  json         registered_spots_data_json,
    out json         registered_selected_spots_json,
    out json         tissue_mask_metrics,
    out jpg          qc_detected_tissue_image,
    out jpg          detected_tissue_mask,
    out jpg          initialisation_debug,
    out png          grabcut_markers,
    out bool         grabcut_failed,
    src py           "stages/spatial/detect_tissue",
) split (
) using (
    volatile = strict,
)

stage OUTPUT_SPOTS_BARCODES(
    in  json   registered_selected_spots_json,
    in  json   tissue_transform_json,
    in  json   scalefactors,
    in  string barcode_whitelist,
    in  string visium_hd_slide_name,
    in  png    tissue_lowres_image,
    out txt    final_spot_position_list,
    out txt    final_fiducial_position_list,
    out csv    tissue_positions,
    out json   barcodes_under_tissue,
    out float  fraction_under_tissue,
    out json   tissue_final_transform_json,
    out json   scalefactors,
    out json   fraction_bc_outside_image,
    src py     "stages/spatial/output_spots_barcodes",
) split (
) using (
    volatile = strict,
)

stage CALCULATE_FLUORESCENCE_INTENSITY(
    in  file[]       tissue_image_paths,
    in  int          dark_images,
    in  json         scalefactors_json,
    in  csv          tissue_positions,
    in  string       barcode_whitelist,
    in  string[]     image_page_names,
    in  path         loupe_alignment_file,
    in  PipelineMode pipeline_mode,
    out csv          barcode_fluorescence_intensity,
    src py           "stages/spatial/calculate_fluorescence_intensity",
) split (
) using (
    mem_gb   = 1,
    threads  = 1,
    volatile = strict,
)

stage SEED_REGISTRATION(
    in  png       tissue_detection_image,
    in  tiff      registration_target_image,
    in  json      loupe_tissue_registration_json,
    in  json      crop_info_json,
    in  json      registered_spots_data_json,
    in  float[][] fid_perp_tmat,
    in  bool      is_visium_hd,
    in  float     tissue_image_pixel_size,
    in  bool      is_pd,
    in  bool      skip_feature_matching_init,
    out json      initial_transform_info_json,
    out float     pixel_size_target_to_cyta_ratio,
    out json      feature_matching_metrics,
    out jpg       cytassist_tissue_detection_debug,
    out jpg       target_tissue_detection_debug,
    out jpg       matched_features_debug,
    out jpg       feature_matching_registered_tissue_image,
    src py        "stages/spatial/seed_registration",
) split (
    in  float     cyta_scale_factor,
    in  float     target_scale_factor,
    out float     metric,
    out float[][] init_transform_mat,
    out json      chunk_feature_matching_metrics,
    out jpg       chunk_matched_features_debug,
    out jpg       chunk_feature_matching_registered_tissue_image,
) using (
    mem_gb   = 8,
    volatile = strict,
)

stage REGISTER_FROM_INIT(
    in  png       tissue_detection_image,
    in  tiff      registration_target_image,
    in  json      loupe_tissue_registration_json,
    in  json      crop_info_json,
    in  json      initial_transform_info_json,
    in  float[][] fid_perp_tmat,
    in  bool      is_visium_hd,
    in  float     pixel_size_target_to_cyta_ratio,
    in  bool      is_pd,
    out json      final_transform_json,
    out json      sitk_registration_metrics,
    out jpg       max_mutual_info_init_debug,
    out string    itk_error_string,
    src py        "stages/spatial/register_from_init",
) split (
    in  float[][] init_transform_mat,
    in  string    init_method_used,
    out float     metric,
    out string    chunk_stop_description,
    out float[]   transform_mat,
    out jpg       chunk_max_mutual_info_init_debug,
) using (
    mem_gb   = 8,
    volatile = strict,
)

stage SUMMARIZE_REGISTRATION(
    in  png       tissue_detection_image,
    in  tiff      registration_target_image,
    in  float[][] fid_perp_tmat,
    in  bool      is_visium_hd,
    in  bool      is_pd,
    in  json      fm_tissue_registration_metrics,
    in  json      sitk_tissue_registration_metrics,
    in  json      final_transform_json,
    in  path      loupe_alignment_file,
    out json      tissue_registration_metrics,
    out tiff      resampled_cyta_img,
    out jpg       qc_registered_tissue_image,
    out jpg       qc_resampled_cyta_img,
    out jpg       qc_regist_target_img,
    src py        "stages/spatial/summarize_registration",
) using (
    mem_gb   = 8,
    vmem_gb  = 16,
    volatile = strict,
)

stage OUTPUT_FINAL_ALIGNMENT(
    in  string slide_serial_capture_area,
    in  file[] cytassist_image_paths,
    in  file[] tissue_image_paths,
    in  json   registered_spots_data_json,
    in  json   final_transform_json,
    in  json   transform_matrix,
    in  json   registered_selected_spots_json,
    in  json   scalefactors_json,
    out json   fiducial_bounding_box_on_tissue_image,
    src py     "stages/spatial/output_final_alignment",
) using (
    volatile = strict,
)

stage COLLECT_IMAGING_METRICS(
    in  file[] tissue_image_paths,
    in  jpg    detected_tissue_mask,
    in  bool   segmentation_from_user,
    in  json[] summaries,
    out json   imaging_metrics,
    out json   tissue_image_shape,
    src py     "stages/spatial/collect_imaging_metrics",
) using (
    mem_gb   = 8,
    vmem_gb  = 64,
    volatile = strict,
)

stage END_TO_END_REGISTRATION(
    in  png            tissue_detection_image,
    in  tiff           registration_target_image,
    in  json           tissue_transform_json,
    in  h5             raw_feature_bc_matrix_h5,
    in  json           registered_spots_data_json,
    in  json           fiducial_transform,
    in  HdLayoutOffset custom_layout_offset,
    out json           summary,
    out json           e2e_hd_layout_data_json,
    out json           e2e_registered_spots_data_json,
    out jpg            qc_phase_corr_map,
    src py             "stages/spatial/end_to_end_registration",
) split (
) using (
    volatile = strict,
)

stage PICK_REGISTERED_SPOT_DATA(
    in  json align_fiducials_registered_spots_data_json,
    in  json e2e_registered_spots_data_json,
    in  json raw_hd_layout_data_json,
    in  json e2e_hd_layout_data_json,
    out json registered_spots_data_json,
    out json hd_layout_data_json,
    src py   "stages/spatial/pick_registered_spot_data",
) using (
    volatile = strict,
)

pipeline REGISTER_TISSUE(
    in  png                   tissue_detection_image,
    in  tiff                  registration_target_image,
    in  json                  loupe_tissue_registration_json,
    in  json                  crop_info_json,
    in  json                  registered_spots_data_json,
    in  float[][]             fid_perp_tmat,
    in  bool                  is_visium_hd,
    in  float                 tissue_image_pixel_size,
    in  bool                  is_pd,
    in  bool                  skip_feature_matching_init,
    in  path                  loupe_alignment_file,
    in  h5                    raw_feature_bc_matrix_h5,
    in  UmiRegistrationInputs umi_registration_inputs,
    in  json                  fiducial_transform,
    out json                  tissue_registration_metrics,
    out jpg                   feature_matching_registered_tissue_image,
    out jpg                   matched_features_debug,
    out json                  tissue_transform_json,
    out tiff                  resampled_cyta_img,
    out jpg                   qc_registered_tissue_image,
    out jpg                   qc_resampled_cyta_img,
    out jpg                   qc_regist_target_img,
    out jpg                   max_mutual_info_init_debug,
    out jpg                   cytassist_tissue_detection_debug,
    out jpg                   target_tissue_detection_debug,
    out jpg                   e2e_qc_phase_corr_map,
    out string                itk_error_string,
    out json                  e2e_registered_spots_data_json,
    out json                  e2e_hd_layout_data_json,
    out json                  summary,
)
{
    call SEED_REGISTRATION(
        tissue_detection_image     = self.tissue_detection_image,
        registration_target_image  = self.registration_target_image,
        loupe_tissue_registration_json = self.loupe_tissue_registration_json,
        crop_info_json             = self.crop_info_json,
        registered_spots_data_json = self.registered_spots_data_json,
        fid_perp_tmat              = self.fid_perp_tmat,
        is_visium_hd               = self.is_visium_hd,
        tissue_image_pixel_size    = self.tissue_image_pixel_size,
        is_pd                      = self.is_pd,
        skip_feature_matching_init = self.skip_feature_matching_init,
    )

    call REGISTER_FROM_INIT(
        tissue_detection_image      = self.tissue_detection_image,
        registration_target_image   = self.registration_target_image,
        crop_info_json              = self.crop_info_json,
        pixel_size_target_to_cyta_ratio = SEED_REGISTRATION.pixel_size_target_to_cyta_ratio,
        loupe_tissue_registration_json = self.loupe_tissue_registration_json,
        initial_transform_info_json = SEED_REGISTRATION.initial_transform_info_json,
        fid_perp_tmat               = self.fid_perp_tmat,
        is_visium_hd                = self.is_visium_hd,
        is_pd                       = self.is_pd,
    )

    call SUMMARIZE_REGISTRATION(
        tissue_detection_image    = self.tissue_detection_image,
        registration_target_image = self.registration_target_image,
        fid_perp_tmat             = self.fid_perp_tmat,
        is_visium_hd              = self.is_visium_hd,
        is_pd                     = self.is_pd,
        fm_tissue_registration_metrics = SEED_REGISTRATION.feature_matching_metrics,
        sitk_tissue_registration_metrics = REGISTER_FROM_INIT.sitk_registration_metrics,
        final_transform_json      = REGISTER_FROM_INIT.final_transform_json,
        loupe_alignment_file      = self.loupe_alignment_file,
    )

    call END_TO_END_REGISTRATION(
        custom_layout_offset       = self.umi_registration_inputs.offset,
        tissue_detection_image     = self.tissue_detection_image,
        registration_target_image  = self.registration_target_image,
        tissue_transform_json      = REGISTER_FROM_INIT.final_transform_json,
        raw_feature_bc_matrix_h5   = self.raw_feature_bc_matrix_h5,
        registered_spots_data_json = self.registered_spots_data_json,
        fiducial_transform         = self.fiducial_transform,
    ) using (
        disabled = self.umi_registration_inputs.disable,
    )

    return (
        tissue_registration_metrics   = SUMMARIZE_REGISTRATION.tissue_registration_metrics,
        feature_matching_registered_tissue_image = SEED_REGISTRATION.feature_matching_registered_tissue_image,
        matched_features_debug        = SEED_REGISTRATION.matched_features_debug,
        tissue_transform_json         = REGISTER_FROM_INIT.final_transform_json,
        max_mutual_info_init_debug    = REGISTER_FROM_INIT.max_mutual_info_init_debug,
        cytassist_tissue_detection_debug = SEED_REGISTRATION.cytassist_tissue_detection_debug,
        target_tissue_detection_debug = SEED_REGISTRATION.target_tissue_detection_debug,
        resampled_cyta_img            = SUMMARIZE_REGISTRATION.resampled_cyta_img,
        qc_registered_tissue_image    = SUMMARIZE_REGISTRATION.qc_registered_tissue_image,
        qc_resampled_cyta_img         = SUMMARIZE_REGISTRATION.qc_resampled_cyta_img,
        qc_regist_target_img          = SUMMARIZE_REGISTRATION.qc_regist_target_img,
        itk_error_string              = REGISTER_FROM_INIT.itk_error_string,
        e2e_registered_spots_data_json = END_TO_END_REGISTRATION.e2e_registered_spots_data_json,
        e2e_hd_layout_data_json       = END_TO_END_REGISTRATION.e2e_hd_layout_data_json,
        e2e_qc_phase_corr_map         = END_TO_END_REGISTRATION.qc_phase_corr_map,
        summary                       = END_TO_END_REGISTRATION.summary,
    )
}
