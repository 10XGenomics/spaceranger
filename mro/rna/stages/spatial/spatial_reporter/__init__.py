#
# Copyright (c) 2019 10X Genomics, Inc. All rights reserved.
#

import copy
import json
import shutil

import cellranger.websummary.spatial_build_web_summary as sp_build
from cellranger.spatial.loupe_util import LoupeParser
from cellranger.spatial.spatial_pandas_utils import estimate_mem_gb_pandas_csv
from cellranger.websummary.react_components import ReactComponentEncoder
from cellranger.websummary.react_summarize import write_html_file

__MRO__ = """
struct SpatialFolder(
    jpg     aligned_fiducials              "Slide image annotated with fiducial alignment",
    jpg     detected_tissue_image          "Slide image annotated with detected tissue",
    json    scalefactors_json              "Scale factors for hires and lowres images and fiducial and spot diameters",
    json    tissue_transform_json          "Transform learned in tissue registration",
    png     tissue_hires_image             "Slide image scaled to 2000px in the largest dimension",
    png     tissue_lowres_image            "Slide image scaled to 600px in the largest dimension",
    tiff    cytassist_image                "RGB brightfield image generated by CytAssist instrument",
    jpg     aligned_tissue_image           "Registration image between CytAssist image and microscope image",
    csv     tissue_positions               "Slide position and tissue status of barcodes (csv)",
    parquet tissue_positions_parquet       "Slide position and tissue status of barcodes (parquet)"                    "tissue_positions.parquet",
    csv     spatial_enrichment             "Per feature Moran's I CSV",
    csv     barcode_fluorescence_intensity "Fluorescence intensity at spot CSV",
)

stage SPATIAL_REPORTER(
    in  json              summary,
    in  string            sample_id,
    in  string            sample_desc,
    in  map<ChemistryDef> chemistry_defs,
    in  string            slide_serial_info,
    in  path              reference_path,
    in  path              analysis,
    in  h5                barcode_summary_h5,
    in  csv               filtered_barcodes,
    in  csv               feature_reference,
    in  int[]             gem_groups,
    in  h5                matrix,
    in  json              scalefactors,
    in  jpg               aligned_fiducials,
    in  float             fraction_under_tissue,
    in  png               tissue_hires_image,
    in  png               tissue_lowres_image,
    in  tiff              cytassist_image,
    in  jpg               detected_tissue_image,
    in  jpg               qc_resampled_cyta_img,
    in  jpg               qc_regist_target_img,
    in  csv               tissue_positions,
    in  string            target_set_name,
    in  string            targeting_method,
    in  tps.json          target_panel_summary,
    in  json              antibody_histograms,
    in  json              antibody_treemap,
    in  json              raw_normalized_heatmap,
    in  json              isotype_scatter,
    in  json              gex_fbc_correlation_heatmap,
    in  json              ab_qc_summary,
    in  json              cytassist_run_metrics,
    in  csv               per_feature_metrics_csv,
    in  string            reorientation_mode,
    in  bool              filter_probes,
    in  bool              include_introns,
    in  string            aligner,
    in  path              loupe_alignment_file,
    in  file[]            tissue_image_paths,
    in  tiff[]            cytassist_image_paths,
    in  V1PatternFixArgs  v1_pattern_fix,
    in  json              hd_layout_data_json,
    in  bool              override_id,
    in  bool              slide_id_mismatch,
    in  bool              is_visium_hd,
    in  string            itk_error_string,
    in  bool              grabcut_failed,
    out html              web_summary,
    out json              web_summary_json,
    out json              metrics_summary_json,
    out csv               metrics_summary_csv,
    out csv               feature_reference,
    src py                "stages/spatial/spatial_reporter",
) split (
) using (
    volatile = strict,
) retain (
    metrics_summary_json,
)
"""


def split(args):
    mem_gb = max(
        6.0,
        LoupeParser.estimate_mem_gb_from_json_file(args.loupe_alignment_file),
        1.0 + estimate_mem_gb_pandas_csv(args.filtered_barcodes),
    )
    return {
        "chunks": [],
        "join": {
            "__mem_gb": mem_gb,
        },
    }


def join(args, outs, _chunk_defs, _chunk_outs):
    ### make a web summary
    web_sum_data = sp_build.create_common_spatial_summaries(
        args=args,
        outs=outs,
        metrics_csv_out=outs.metrics_summary_csv,
    )
    web_sum_data_copy = copy.deepcopy(web_sum_data)
    with open(outs.web_summary_json, "w") as f:
        json.dump(web_sum_data_copy, f, cls=ReactComponentEncoder)

    write_html_file(outs.web_summary, web_sum_data)

    ## copy over the feature reference file to the outs folder
    if args.feature_reference:
        shutil.copy(args.feature_reference, outs.feature_reference)
