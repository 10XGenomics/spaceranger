#
# Copyright (c) 2019 10X Genomics, Inc. All rights reserved.
#

@include "_cr_lib_stages.mro"

pipeline MAKE_READ_SHARDS_STRUCT(
    in  shard[]    valid_reads,
    in  shard[]    corrected_reads,
    in  shard[]    invalid_reads,
    out ReadShards read_shards,
)
{
    return (
        read_shards = {
            corrected_reads: self.corrected_reads,
            invalid_reads:   self.invalid_reads,
            valid_reads:     self.valid_reads,
        },
    )
}

pipeline _SLFE_MATRIX_COMPUTER(
    in  CountInputs        count_inputs,
    in  string             sample_id,
    in  map<ChemistryDef>  chemistry_defs,
    in  bool               is_pd,
    in  map[]              chunks,
    in  csv                target_features,
    in  FeatureConfig      feature_config,
    # Note: _SLFE_MATRIX_COMPUTER processes data from a single gem well.
    in  int                gem_well,
    in  V1PatternFixParams v1_pattern_fix_params,
    in  BarcodeIndexOutput barcode_index_override,
    out frf.bincode        slfe_feature_reference,
    out csv                barcode_correction_csv,
    out h5                 barcode_summary,
    out h5                 raw_gene_bc_matrices_h5,
    out path               raw_gene_bc_matrices_mex,
    out ReadShards         read_shards,
    out csf[]              counts_bc_order,
    out bui[]              report_mol_inputs,
    out json               summary,
    out AnnotationFiles    annotation_files,
    out csv                per_barcode_metrics,
    out bmsf[]             per_barcode_metrics_shard,
    out bui[]              bc_umi_info,
    out csf[]              probe_barcode_counts,
    out path               bam_header,
    out asf[]              alignments,
    out map[]              read_chunks,
    out SampleMetrics[]    multi_metrics,
    out json               gem_well_alignment_metrics,
    out bi.bincode         barcode_index,
    out smf.json           sequencing_metrics,
    ### One file has bc_counts from MAKE_SHARD for use by ATAC
    # FIXME: just pluck the single GEX counts file from the map
    out map<sbc.bincode>   make_shard_bc_counts,
    out bool               no_star_alignments,
    out parquet[]          per_read_gap_align,
)
{
    call MAKE_SHARD(
        chemistry_defs  = self.chemistry_defs,
        feature_config  = self.feature_config,
        gem_well        = self.gem_well,
        read_chunks     = self.chunks,
        target_features = self.target_features,
        *               = self.count_inputs,
    )

    call MAKE_CORRECTION_MAP(
        barcode_segment_counts = MAKE_SHARD.barcode_segment_counts,
        chemistry_defs         = self.chemistry_defs,
    )

    call BARCODE_CORRECTION(
        barcode_counts         = MAKE_SHARD.barcode_counts,
        barcode_segment_counts = MAKE_SHARD.barcode_segment_counts,
        correction_map         = MAKE_CORRECTION_MAP.correction_map,
        invalid_uncorrected    = MAKE_SHARD.invalid,
        valid_read_metrics     = MAKE_SHARD.bc_correct_summary,
        chemistry_defs         = self.chemistry_defs,
        gem_well               = self.gem_well,
    )

    call MAKE_READ_SHARDS_STRUCT(
        valid_reads     = MAKE_SHARD.valid,
        corrected_reads = BARCODE_CORRECTION.valid_corrected,
        invalid_reads   = BARCODE_CORRECTION.invalid,
    )

    call ALIGN_AND_COUNT(
        v1_pattern_fix_params    = self.v1_pattern_fix_params,
        corrected_barcode_counts = BARCODE_CORRECTION.corrected_barcode_counts,
        invalid_barcode_counts   = BARCODE_CORRECTION.invalid_barcode_counts,
        read_shards              = MAKE_READ_SHARDS_STRUCT.read_shards,
        feature_counts           = MAKE_SHARD.feature_counts,
        feature_reference_binary = MAKE_SHARD.feature_reference_binary,
        barcode_subset           = null,
        chemistry_defs           = self.chemistry_defs,
        gem_well                 = self.gem_well,
        is_pd                    = self.is_pd,
        read_chunks              = self.chunks,
        reference_path           = self.count_inputs.reference_info.transcriptome_info.reference_path,
        transcriptome_min_score  = 30,
        *                        = self.count_inputs,
    )

    call COLLATE_METRICS(
        per_barcode_metrics      = ALIGN_AND_COUNT.per_barcode_metrics,
        feature_reference_binary = MAKE_SHARD.feature_reference_binary,
        filtered_barcodes        = null,
        aggregate_barcodes       = null,
        sample_barcodes          = null,
        *                        = self.count_inputs,
    )

    call WRITE_BARCODE_INDEX(
        barcode_counts         = BARCODE_CORRECTION.corrected_barcode_counts,
        barcode_index_override = self.barcode_index_override,
    )

    call WRITE_BARCODE_SUMMARY(
        per_barcode_metrics  = ALIGN_AND_COUNT.per_barcode_metrics,
        feature_reference    = MAKE_SHARD.feature_reference_binary,
        barcode_index_output = WRITE_BARCODE_INDEX.barcode_index_output,
    )

    call WRITE_H5_MATRIX(
        barcode_index_output = WRITE_BARCODE_INDEX.barcode_index_output,
        feature_reference    = MAKE_SHARD.feature_reference_binary,
        counts               = ALIGN_AND_COUNT.counts_bc_order,
        chemistry_defs       = self.chemistry_defs,
        gem_well             = self.gem_well,
        sample_id            = self.sample_id,
    )

    call WRITE_MATRIX_MARKET(
        counts               = ALIGN_AND_COUNT.counts_bc_order,
        feature_reference    = MAKE_SHARD.feature_reference_binary,
        barcode_index_output = WRITE_BARCODE_INDEX.barcode_index_output,
    )

    call MERGE_METRICS(
        summaries = [
            MAKE_SHARD.summary,
            BARCODE_CORRECTION.summary,
            ALIGN_AND_COUNT.summary,
            COLLATE_METRICS.summary,
            WRITE_BARCODE_INDEX.summary,
        ],
    )

    return (
        barcode_correction_csv     = ALIGN_AND_COUNT.barcode_summary,
        barcode_summary            = WRITE_BARCODE_SUMMARY.barcode_summary,
        raw_gene_bc_matrices_h5    = WRITE_H5_MATRIX.matrix,
        raw_gene_bc_matrices_mex   = WRITE_MATRIX_MARKET.feature_bc_matrix,
        read_shards                = MAKE_READ_SHARDS_STRUCT.read_shards,
        counts_bc_order            = ALIGN_AND_COUNT.counts_bc_order,
        report_mol_inputs          = ALIGN_AND_COUNT.bc_umi_info,
        summary                    = MERGE_METRICS.summary,
        slfe_feature_reference     = MAKE_SHARD.feature_reference_binary,
        annotation_files           = ALIGN_AND_COUNT.annotation_files,
        per_barcode_metrics        = COLLATE_METRICS.per_barcode_metrics,
        per_barcode_metrics_shard  = ALIGN_AND_COUNT.per_barcode_metrics,
        bc_umi_info                = ALIGN_AND_COUNT.bc_umi_info,
        bam_header                 = ALIGN_AND_COUNT.bam_header,
        alignments                 = ALIGN_AND_COUNT.pos_sorted,
        read_chunks                = self.chunks,
        multi_metrics              = COLLATE_METRICS.multi_metrics,
        gem_well_alignment_metrics = COLLATE_METRICS.summary,
        barcode_index              = WRITE_BARCODE_INDEX.barcode_index_output.index,
        sequencing_metrics         = MAKE_SHARD.sequencing_metrics,
        make_shard_bc_counts       = MAKE_SHARD.barcode_counts,
        probe_barcode_counts       = ALIGN_AND_COUNT.probe_barcode_counts,
        no_star_alignments         = ALIGN_AND_COUNT.no_star_alignments,
        per_read_gap_align         = ALIGN_AND_COUNT.per_read_gap_align,
    )
}
